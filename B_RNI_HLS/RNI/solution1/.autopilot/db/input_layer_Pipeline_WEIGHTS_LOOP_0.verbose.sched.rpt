

================================================================
== Vitis HLS Report for 'input_layer_Pipeline_WEIGHTS_LOOP_0'
================================================================
* Date:           Tue Nov 26 16:00:49 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        RNI
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.077 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+----------+-----+-------+---------+
    |  Latency (cycles) |  Latency (absolute)  |   Interval  | Pipeline|
    |   min   |   max   |    min    |    max   | min |  max  |   Type  |
    +---------+---------+-----------+----------+-----+-------+---------+
    |        2|    65541|  20.000 ns|  0.655 ms|    2|  65541|       no|
    +---------+---------+-----------+----------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------+---------+---------+----------+-----------+-----------+-----------+----------+
        |                  |  Latency (cycles) | Iteration|  Initiation Interval  |    Trip   |          |
        |     Loop Name    |   min   |   max   |  Latency |  achieved |   target  |   Count   | Pipelined|
        +------------------+---------+---------+----------+-----------+-----------+-----------+----------+
        |- WEIGHTS_LOOP_0  |        0|    65539|         6|          1|          1|  0 ~ 65535|       yes|
        +------------------+---------+---------+----------+-----------+-----------+-----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 7


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 7
* Pipeline : 1
  Pipeline-0 : II = 1, D = 7, States = { 1 2 3 4 5 6 7 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.58>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%empty = alloca i32 1"   --->   Operation 9 'alloca' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%weight_index = alloca i32 1"   --->   Operation 10 'alloca' 'weight_index' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%p_read_1 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %p_read3"   --->   Operation 11 'read' 'p_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%p_read_2 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %p_read2"   --->   Operation 12 'read' 'p_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%p_read_3 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %p_read1"   --->   Operation 13 'read' 'p_read_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%p_read_4 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %p_read"   --->   Operation 14 'read' 'p_read_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%zext_ln69_1_read = read i14 @_ssdm_op_Read.ap_auto.i14, i14 %zext_ln69_1"   --->   Operation 15 'read' 'zext_ln69_1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%NEURONS_MEMBRANE_load_1_read = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %NEURONS_MEMBRANE_load_1"   --->   Operation 16 'read' 'NEURONS_MEMBRANE_load_1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%zext_ln69_read = read i14 @_ssdm_op_Read.ap_auto.i14, i14 %zext_ln69"   --->   Operation 17 'read' 'zext_ln69_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%zext_ln69_1_cast = zext i14 %zext_ln69_1_read"   --->   Operation 18 'zext' 'zext_ln69_1_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%zext_ln69_cast = zext i14 %zext_ln69_read"   --->   Operation 19 'zext' 'zext_ln69_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (1.58ns)   --->   "%store_ln0 = store i64 %zext_ln69_cast, i64 %weight_index"   --->   Operation 20 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 21 [1/1] (1.58ns)   --->   "%store_ln0 = store i16 %NEURONS_MEMBRANE_load_1_read, i16 %empty"   --->   Operation 21 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body18"   --->   Operation 22 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 5.10>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%weight_index_1 = load i64 %weight_index" [src/RNI.cpp:71]   --->   Operation 23 'load' 'weight_index_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 24 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (3.52ns)   --->   "%icmp_ln69 = icmp_eq  i64 %weight_index_1, i64 %zext_ln69_1_cast" [src/RNI.cpp:69]   --->   Operation 25 'icmp' 'icmp_ln69' <Predicate = true> <Delay = 3.52> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%br_ln69 = br i1 %icmp_ln69, void %for.body18.split, void %for.inc30.loopexit.exitStub" [src/RNI.cpp:69]   --->   Operation 26 'br' 'br_ln69' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%trunc_ln71 = trunc i64 %weight_index_1" [src/RNI.cpp:71]   --->   Operation 27 'trunc' 'trunc_ln71' <Predicate = (!icmp_ln69)> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%WEIGHTS_addr = getelementptr i8 %WEIGHTS, i64 0, i64 %weight_index_1" [src/RNI.cpp:71]   --->   Operation 28 'getelementptr' 'WEIGHTS_addr' <Predicate = (!icmp_ln69)> <Delay = 0.00>
ST_2 : Operation 29 [2/2] (3.25ns)   --->   "%WEIGHTS_load = load i14 %WEIGHTS_addr" [src/RNI.cpp:71]   --->   Operation 29 'load' 'WEIGHTS_load' <Predicate = (!icmp_ln69)> <Delay = 3.25> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 11312> <ROM>
ST_2 : Operation 30 [1/1] (3.52ns)   --->   "%add_ln69 = add i64 %weight_index_1, i64 1" [src/RNI.cpp:69]   --->   Operation 30 'add' 'add_ln69' <Predicate = (!icmp_ln69)> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (1.58ns)   --->   "%store_ln69 = store i64 %add_ln69, i64 %weight_index" [src/RNI.cpp:69]   --->   Operation 31 'store' 'store_ln69' <Predicate = (!icmp_ln69)> <Delay = 1.58>

State 3 <SV = 2> <Delay = 3.25>
ST_3 : Operation 32 [1/1] (1.82ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %p_read_4, i32 %p_read_3, i32 %p_read_2, i32 %p_read_1, i2 %trunc_ln71" [src/RNI.cpp:71]   --->   Operation 32 'mux' 'tmp_2' <Predicate = true> <Delay = 1.82> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 33 [1/2] (3.25ns)   --->   "%WEIGHTS_load = load i14 %WEIGHTS_addr" [src/RNI.cpp:71]   --->   Operation 33 'load' 'WEIGHTS_load' <Predicate = true> <Delay = 3.25> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 11312> <ROM>

State 4 <SV = 3> <Delay = 6.91>
ST_4 : Operation 34 [1/1] (0.00ns)   --->   "%sext_ln71 = sext i8 %WEIGHTS_load" [src/RNI.cpp:71]   --->   Operation 34 'sext' 'sext_ln71' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 35 [1/1] (0.00ns)   --->   "%sext_ln71_1 = sext i32 %tmp_2" [src/RNI.cpp:71]   --->   Operation 35 'sext' 'sext_ln71_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 36 [2/2] (6.91ns)   --->   "%mul_ln71 = mul i40 %sext_ln71_1, i40 %sext_ln71" [src/RNI.cpp:71]   --->   Operation 36 'mul' 'mul_ln71' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 6.91>
ST_5 : Operation 37 [1/2] (6.91ns)   --->   "%mul_ln71 = mul i40 %sext_ln71_1, i40 %sext_ln71" [src/RNI.cpp:71]   --->   Operation 37 'mul' 'mul_ln71' <Predicate = true> <Delay = 6.91> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 38 [1/1] (0.00ns)   --->   "%trunc_ln71_1 = trunc i40 %mul_ln71" [src/RNI.cpp:71]   --->   Operation 38 'trunc' 'trunc_ln71_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 39 [1/1] (0.00ns)   --->   "%trunc_ln71_2 = trunc i40 %mul_ln71" [src/RNI.cpp:71]   --->   Operation 39 'trunc' 'trunc_ln71_2' <Predicate = true> <Delay = 0.00>

State 6 <SV = 5> <Delay = 7.07>
ST_6 : Operation 40 [1/1] (0.00ns)   --->   "%p_load = load i16 %empty" [src/RNI.cpp:71]   --->   Operation 40 'load' 'p_load' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 41 [1/1] (0.00ns)   --->   "%sext_ln71_2 = sext i16 %p_load" [src/RNI.cpp:71]   --->   Operation 41 'sext' 'sext_ln71_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 42 [1/1] (2.83ns)   --->   "%add_ln71 = add i39 %trunc_ln71_1, i39 %sext_ln71_2" [src/RNI.cpp:71]   --->   Operation 42 'add' 'add_ln71' <Predicate = true> <Delay = 2.83> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.83> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 43 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i39.i32, i39 %add_ln71, i32 38" [src/RNI.cpp:71]   --->   Operation 43 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 44 [1/1] (2.07ns)   --->   "%add_ln71_1 = add i16 %trunc_ln71_2, i16 %p_load" [src/RNI.cpp:71]   --->   Operation 44 'add' 'add_ln71_1' <Predicate = true> <Delay = 2.07> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.07> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 45 [1/1] (0.00ns)   --->   "%tmp_1 = bitselect i1 @_ssdm_op_BitSelect.i1.i16.i32, i16 %add_ln71_1, i32 15" [src/RNI.cpp:71]   --->   Operation 45 'bitselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_3 = partselect i23 @_ssdm_op_PartSelect.i23.i39.i32.i32, i39 %add_ln71, i32 16, i32 38" [src/RNI.cpp:71]   --->   Operation 46 'partselect' 'tmp_3' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 47 [1/1] (2.28ns)   --->   "%icmp_ln71 = icmp_ne  i23 %tmp_3, i23 0" [src/RNI.cpp:71]   --->   Operation 47 'icmp' 'icmp_ln71' <Predicate = true> <Delay = 2.28> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.28> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node and_ln71)   --->   "%or_ln71 = or i1 %tmp_1, i1 %icmp_ln71" [src/RNI.cpp:71]   --->   Operation 48 'or' 'or_ln71' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node and_ln71)   --->   "%xor_ln71 = xor i1 %tmp, i1 1" [src/RNI.cpp:71]   --->   Operation 49 'xor' 'xor_ln71' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 50 [1/1] (0.97ns) (out node of the LUT)   --->   "%and_ln71 = and i1 %or_ln71, i1 %xor_ln71" [src/RNI.cpp:71]   --->   Operation 50 'and' 'and_ln71' <Predicate = true> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 51 [1/1] (0.00ns) (grouped into LUT with out node select_ln71_1)   --->   "%xor_ln71_1 = xor i1 %tmp_1, i1 1" [src/RNI.cpp:71]   --->   Operation 51 'xor' 'xor_ln71_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 52 [1/1] (2.28ns)   --->   "%icmp_ln71_1 = icmp_ne  i23 %tmp_3, i23 8388607" [src/RNI.cpp:71]   --->   Operation 52 'icmp' 'icmp_ln71_1' <Predicate = true> <Delay = 2.28> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.28> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 53 [1/1] (0.00ns) (grouped into LUT with out node select_ln71_1)   --->   "%or_ln71_1 = or i1 %icmp_ln71_1, i1 %xor_ln71_1" [src/RNI.cpp:71]   --->   Operation 53 'or' 'or_ln71_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node select_ln71_1)   --->   "%and_ln71_1 = and i1 %or_ln71_1, i1 %tmp" [src/RNI.cpp:71]   --->   Operation 54 'and' 'and_ln71_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node select_ln71_1)   --->   "%select_ln71 = select i1 %and_ln71, i16 32767, i16 32768" [src/RNI.cpp:71]   --->   Operation 55 'select' 'select_ln71' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node select_ln71_1)   --->   "%or_ln71_2 = or i1 %and_ln71, i1 %and_ln71_1" [src/RNI.cpp:71]   --->   Operation 56 'or' 'or_ln71_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 57 [1/1] (0.97ns) (out node of the LUT)   --->   "%select_ln71_1 = select i1 %or_ln71_2, i16 %select_ln71, i16 %add_ln71_1" [src/RNI.cpp:71]   --->   Operation 57 'select' 'select_ln71_1' <Predicate = true> <Delay = 0.97> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 62 [1/1] (0.00ns)   --->   "%p_load13 = load i16 %empty"   --->   Operation 62 'load' 'p_load13' <Predicate = (icmp_ln69)> <Delay = 0.00>
ST_6 : Operation 63 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i16P0A, i16 %p_out, i16 %p_load13"   --->   Operation 63 'write' 'write_ln0' <Predicate = (icmp_ln69)> <Delay = 0.00>
ST_6 : Operation 64 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 64 'ret' 'ret_ln0' <Predicate = (icmp_ln69)> <Delay = 0.00>

State 7 <SV = 6> <Delay = 1.58>
ST_7 : Operation 58 [1/1] (0.00ns)   --->   "%speclooptripcount_ln69 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 0, i64 65535, i64 32767" [src/RNI.cpp:69]   --->   Operation 58 'speclooptripcount' 'speclooptripcount_ln69' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 59 [1/1] (0.00ns)   --->   "%specloopname_ln69 = specloopname void @_ssdm_op_SpecLoopName, void @empty_9" [src/RNI.cpp:69]   --->   Operation 59 'specloopname' 'specloopname_ln69' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 60 [1/1] (1.58ns)   --->   "%store_ln69 = store i16 %select_ln71_1, i16 %empty" [src/RNI.cpp:69]   --->   Operation 60 'store' 'store_ln69' <Predicate = true> <Delay = 1.58>
ST_7 : Operation 61 [1/1] (0.00ns)   --->   "%br_ln69 = br void %for.body18" [src/RNI.cpp:69]   --->   Operation 61 'br' 'br_ln69' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 1.588ns
The critical path consists of the following:
	'alloca' operation ('weight_index') [11]  (0.000 ns)
	'store' operation ('store_ln0') of variable 'zext_ln69_cast' on local variable 'weight_index' [21]  (1.588 ns)

 <State 2>: 5.108ns
The critical path consists of the following:
	'load' operation ('weight_index', src/RNI.cpp:71) on local variable 'weight_index' [25]  (0.000 ns)
	'add' operation ('add_ln69', src/RNI.cpp:69) [59]  (3.520 ns)
	'store' operation ('store_ln69', src/RNI.cpp:69) of variable 'add_ln69', src/RNI.cpp:69 on local variable 'weight_index' [60]  (1.588 ns)

 <State 3>: 3.254ns
The critical path consists of the following:
	'load' operation ('WEIGHTS_load', src/RNI.cpp:71) on array 'WEIGHTS' [36]  (3.254 ns)

 <State 4>: 6.912ns
The critical path consists of the following:
	'mul' operation ('mul_ln71', src/RNI.cpp:71) [39]  (6.912 ns)

 <State 5>: 6.912ns
The critical path consists of the following:
	'mul' operation ('mul_ln71', src/RNI.cpp:71) [39]  (6.912 ns)

 <State 6>: 7.077ns
The critical path consists of the following:
	'load' operation ('p_load', src/RNI.cpp:71) on local variable 'empty' [30]  (0.000 ns)
	'add' operation ('add_ln71', src/RNI.cpp:71) [43]  (2.837 ns)
	'icmp' operation ('icmp_ln71', src/RNI.cpp:71) [48]  (2.285 ns)
	'or' operation ('or_ln71', src/RNI.cpp:71) [49]  (0.000 ns)
	'and' operation ('and_ln71', src/RNI.cpp:71) [51]  (0.978 ns)
	'select' operation ('select_ln71', src/RNI.cpp:71) [56]  (0.000 ns)
	'select' operation ('select_ln71_1', src/RNI.cpp:71) [58]  (0.978 ns)

 <State 7>: 1.588ns
The critical path consists of the following:
	'store' operation ('store_ln69', src/RNI.cpp:69) of variable 'select_ln71_1', src/RNI.cpp:71 on local variable 'empty' [61]  (1.588 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
