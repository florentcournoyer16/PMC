-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity RNI_input_layer_WEIGHTS_INDEX_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 14; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 244
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of RNI_input_layer_WEIGHTS_INDEX_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000", 1 => "00000000000100", 2 => "00000000001000", 3 => "00000000001100", 
    4 => "00000000010000", 5 => "00000000010100", 6 => "00000000011000", 7 => "00000000011100", 
    8 => "00000000100000", 9 => "00000000100100", 10 => "00000000101000", 11 => "00000000101100", 
    12 => "00000000110000", 13 => "00000000110100", 14 => "00000000111000", 15 => "00000000111100", 
    16 => "00000001000000", 17 => "00000001000100", 18 => "00000001001000", 19 => "00000001001100", 
    20 => "00000001010000", 21 => "00000001010100", 22 => "00000001011000", 23 => "00000001011100", 
    24 => "00000001100000", 25 => "00000001100100", 26 => "00000001101000", 27 => "00000001101100", 
    28 => "00000001110000", 29 => "00000001110100", 30 => "00000001111000", 31 => "00000001111100", 
    32 => "00000010000000", 33 => "00000010000100", 34 => "00000010001000", 35 => "00000010001100", 
    36 => "00000010010000", 37 => "00000010010100", 38 => "00000010011000", 39 => "00000010011100", 
    40 => "00000010100000", 41 => "00000010100100", 42 => "00000010101000", 43 => "00000010101100", 
    44 => "00000010110000", 45 => "00000010110100", 46 => "00000010111000", 47 => "00000010111100", 
    48 => "00000011000000", 49 => "00000011000100", 50 => "00000011001000", 51 => "00000011001100", 
    52 => "00000011010000", 53 => "00000011010100", 54 => "00000011011000", 55 => "00000011011100", 
    56 => "00000011100000", 57 => "00000011100100", 58 => "00000011101000", 59 => "00000011101100", 
    60 => "00000011110000", 61 => "00000011110100", 62 => "00000011111000", 63 => "00000011111100", 
    64 => "00000100000000", 65 => "00000100000100", 66 => "00000100001000", 67 => "00000100001100", 
    68 => "00000100010000", 69 => "00000100010100", 70 => "00000100011000", 71 => "00000100011100", 
    72 => "00000100100000", 73 => "00000100100100", 74 => "00000100101000", 75 => "00000100101100", 
    76 => "00000100110000", 77 => "00000100110100", 78 => "00000100111000", 79 => "00000100111100", 
    80 => "00000101000000", 81 => "00000101000100", 82 => "00000101001000", 83 => "00000101001100", 
    84 => "00000101010000", 85 => "00000101010100", 86 => "00000101011000", 87 => "00000101011100", 
    88 => "00000101100000", 89 => "00000101100100", 90 => "00000101101000", 91 => "00000101101100", 
    92 => "00000101110000", 93 => "00000101110100", 94 => "00000101111000", 95 => "00000101111100", 
    96 => "00000110000000", 97 => "00000110000100", 98 => "00000110001000", 99 => "00000110001100", 
    100 => "00000110010000", 101 => "00000110010100", 102 => "00000110011000", 103 => "00000110011100", 
    104 => "00000110100000", 105 => "00000110100100", 106 => "00000110101000", 107 => "00000110101100", 
    108 => "00000110110000", 109 => "00000110110100", 110 => "00000110111000", 111 => "00000110111100", 
    112 => "00000111000000", 113 => "00000111000100", 114 => "00000111001000", 115 => "00000111001100", 
    116 => "00000111010000", 117 => "00000111010100", 118 => "00000111011000", 119 => "00000111011100", 
    120 => "00000111100000", 121 => "00000111100100", 122 => "00000111101000", 123 => "00000111101100", 
    124 => "00000111110000", 125 => "00000111110100", 126 => "00000111111000", 127 => "00000111111100", 
    128 => "00001000000000", 129 => "00001010000000", 130 => "00001100000000", 131 => "00001110000000", 
    132 => "00010000000000", 133 => "00010010000000", 134 => "00010100000000", 135 => "00010110000000", 
    136 => "00011000000000", 137 => "00011010000000", 138 => "00011100000000", 139 => "00011110000000", 
    140 => "00100000000000", 141 => "00100010000000", 142 => "00100100000000", 143 => "00100110000000", 
    144 => "00101000000000", 145 => "00101010000000", 146 => "00101100000000", 147 => "00101110000000", 
    148 => "00110000000000", 149 => "00110010000000", 150 => "00110100000000", 151 => "00110110000000", 
    152 => "00111000000000", 153 => "00111010000000", 154 => "00111100000000", 155 => "00111110000000", 
    156 => "01000000000000", 157 => "01000010000000", 158 => "01000100000000", 159 => "01000110000000", 
    160 => "01001000000000", 161 => "01001010000000", 162 => "01001100000000", 163 => "01001110000000", 
    164 => "01010000000000", 165 => "01010010000000", 166 => "01010100000000", 167 => "01010110000000", 
    168 => "01011000000000", 169 => "01011010000000", 170 => "01011100000000", 171 => "01011110000000", 
    172 => "01100000000000", 173 => "01100010000000", 174 => "01100100000000", 175 => "01100110000000", 
    176 => "01101000000000", 177 => "01101010000000", 178 => "01101100000000", 179 => "01101110000000", 
    180 => "01110000000000", 181 => "01110010000000", 182 => "01110100000000", 183 => "01110110000000", 
    184 => "01111000000000", 185 => "01111010000000", 186 => "01111100000000", 187 => "01111110000000", 
    188 => "10000000000000", 189 => "10000010000000", 190 => "10000100000000", 191 => "10000110000000", 
    192 => "10001000000000", 193 => "10001001000000", 194 => "10001010000000", 195 => "10001011000000", 
    196 => "10001100000000", 197 => "10001101000000", 198 => "10001110000000", 199 => "10001111000000", 
    200 => "10010000000000", 201 => "10010001000000", 202 => "10010010000000", 203 => "10010011000000", 
    204 => "10010100000000", 205 => "10010101000000", 206 => "10010110000000", 207 => "10010111000000", 
    208 => "10011000000000", 209 => "10011001000000", 210 => "10011010000000", 211 => "10011011000000", 
    212 => "10011100000000", 213 => "10011101000000", 214 => "10011110000000", 215 => "10011111000000", 
    216 => "10100000000000", 217 => "10100001000000", 218 => "10100010000000", 219 => "10100011000000", 
    220 => "10100100000000", 221 => "10100101000000", 222 => "10100110000000", 223 => "10100111000000", 
    224 => "10101000000000", 225 => "10101000100000", 226 => "10101001000000", 227 => "10101001100000", 
    228 => "10101010000000", 229 => "10101010100000", 230 => "10101011000000", 231 => "10101011100000", 
    232 => "10101100000000", 233 => "10101100100000", 234 => "10101101000000", 235 => "10101101100000", 
    236 => "10101110000000", 237 => "10101110100000", 238 => "10101111000000", 239 => "10101111100000", 
    240 => "10110000000000", 241 => "10110000010000", 242 => "10110000100000", 243 => "10110000110000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

