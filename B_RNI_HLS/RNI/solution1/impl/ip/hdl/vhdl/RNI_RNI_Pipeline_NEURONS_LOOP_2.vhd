-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI_RNI_Pipeline_NEURONS_LOOP_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NEURONS_MEMBRANE_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_MEMBRANE_ce0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_we0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    NEURONS_MEMBRANE_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_MEMBRANE_ce1 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of RNI_RNI_Pipeline_NEURONS_LOOP_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln93_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal NEURONS_MEMBRANE_addr_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal NEURONS_MEMBRANE_addr_reg_232_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln155_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal neuron_index_1_cast_cast_cast_cast_fu_95_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal neuron_index_1_fu_56 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln93_fu_100_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_neuron_index : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln93_fu_85_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal neuron_index_1_cast_cast_cast_fu_91_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal neuron_index_1_cast_cast_cast_fu_91_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln93_fu_100_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln153_2_fu_111_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln153_3_fu_125_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln153_fu_121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln153_2_fu_135_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln153_9_fu_149_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln153_8_fu_139_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln155_fu_181_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sign_fu_173_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln153_fu_159_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_193_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln155_fu_187_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln155_1_fu_203_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component RNI_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    neuron_index_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln93_fu_85_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    neuron_index_1_fu_56 <= add_ln93_fu_100_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    neuron_index_1_fu_56 <= ap_const_lv7_40;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_85_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                NEURONS_MEMBRANE_addr_reg_232 <= neuron_index_1_cast_cast_cast_cast_fu_95_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                NEURONS_MEMBRANE_addr_reg_232_pp0_iter1_reg <= NEURONS_MEMBRANE_addr_reg_232;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln155_reg_238 <= icmp_ln155_fu_211_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    NEURONS_MEMBRANE_address0 <= NEURONS_MEMBRANE_addr_reg_232_pp0_iter1_reg;
    NEURONS_MEMBRANE_address1 <= neuron_index_1_cast_cast_cast_cast_fu_95_p1(8 - 1 downto 0);

    NEURONS_MEMBRANE_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEMBRANE_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            NEURONS_MEMBRANE_ce1 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_MEMBRANE_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln155_reg_238),16));

    NEURONS_MEMBRANE_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln153_fu_159_p2 <= std_logic_vector(signed(sext_ln153_fu_121_p1) + signed(sext_ln153_2_fu_135_p1));
    add_ln155_fu_181_p2 <= std_logic_vector(unsigned(trunc_ln153_9_fu_149_p4) + unsigned(trunc_ln153_8_fu_139_p4));
    add_ln93_fu_100_p0 <= ap_sig_allocacmp_neuron_index;
    add_ln93_fu_100_p2 <= std_logic_vector(signed(add_ln93_fu_100_p0) + signed(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln93_fu_85_p2)
    begin
        if (((icmp_ln93_fu_85_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_neuron_index_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, neuron_index_1_fu_56, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_neuron_index <= ap_const_lv7_40;
        else 
            ap_sig_allocacmp_neuron_index <= neuron_index_1_fu_56;
        end if; 
    end process;

    icmp_ln155_fu_211_p2 <= "0" when (or_ln155_1_fu_203_p3 = ap_const_lv16_0) else "1";
    icmp_ln93_fu_85_p0 <= ap_sig_allocacmp_neuron_index;
    icmp_ln93_fu_85_p2 <= "1" when (icmp_ln93_fu_85_p0 = ap_const_lv7_60) else "0";
    neuron_index_1_cast_cast_cast_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_index_1_cast_cast_cast_fu_91_p1),64));
    neuron_index_1_cast_cast_cast_fu_91_p0 <= ap_sig_allocacmp_neuron_index;
        neuron_index_1_cast_cast_cast_fu_91_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(neuron_index_1_cast_cast_cast_fu_91_p0),8));

    or_ln155_1_fu_203_p3 <= (tmp_1_fu_193_p4 & or_ln155_fu_187_p2);
    or_ln155_fu_187_p2 <= (sign_fu_173_p3 or add_ln155_fu_181_p2);
        sext_ln153_2_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln153_3_fu_125_p4),16));

        sext_ln153_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln153_2_fu_111_p4),16));

    sign_fu_173_p3 <= (tmp_fu_165_p3 & ap_const_lv8_0);
    tmp_1_fu_193_p4 <= add_ln153_fu_159_p2(15 downto 9);
    tmp_fu_165_p3 <= NEURONS_MEMBRANE_q1(8 downto 8);
    trunc_ln153_2_fu_111_p4 <= NEURONS_MEMBRANE_q1(15 downto 1);
    trunc_ln153_3_fu_125_p4 <= NEURONS_MEMBRANE_q1(15 downto 2);
    trunc_ln153_8_fu_139_p4 <= NEURONS_MEMBRANE_q1(10 downto 2);
    trunc_ln153_9_fu_149_p4 <= NEURONS_MEMBRANE_q1(9 downto 1);
end behav;
