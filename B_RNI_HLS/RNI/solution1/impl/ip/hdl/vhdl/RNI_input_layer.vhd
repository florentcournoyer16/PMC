-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI_input_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    NEURONS_MEMBRANE_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_MEMBRANE_ce0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_we0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    NEURONS_MEMBRANE_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    NEURONS_STATE_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_STATE_ce0 : OUT STD_LOGIC;
    NEURONS_STATE_we0 : OUT STD_LOGIC;
    NEURONS_STATE_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of RNI_input_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv33_E7A0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001110011110100000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7E : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal BIASES_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal BIASES_ce0 : STD_LOGIC;
    signal BIASES_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal WEIGHTS_INDEX_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal WEIGHTS_INDEX_ce0 : STD_LOGIC;
    signal WEIGHTS_INDEX_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal WEIGHTS_INDEX_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal WEIGHTS_INDEX_ce1 : STD_LOGIC;
    signal WEIGHTS_INDEX_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln64_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln64_reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln64_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln64_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NEURONS_MEMBRANE_addr_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal NEURONS_MEMBRANE_load_reg_573 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln171_fu_224_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln171_reg_578 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal leaked_membrane_reg_589 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal leaked_membrane_2_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal leaked_membrane_2_reg_617 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal BIASES_load_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln67_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal and_ln67_1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_1_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_2_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_2_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_479_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_reg_641 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_index_reg_656 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal WEIGHTS_INDEX_load_reg_661 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln69_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal NEURONS_MEMBRANE_load_1_reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln178_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start : STD_LOGIC;
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_done : STD_LOGIC;
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_idle : STD_LOGIC;
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_ready : STD_LOGIC;
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_empty_28_phi_fu_173_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_28_reg_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal conv_i58_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal neuron_index_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln67_1_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln171_fu_224_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln171_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal leaked_membrane_1_fu_275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_2_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_6_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_4_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_2_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_3_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_1_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_2_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_4_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_3_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_5_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_3_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_5_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln171_fu_390_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_fu_412_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_1_fu_415_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_fu_421_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_2_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neuron_index_cast_cast_fu_482_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_i_i70_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_input_layer_Pipeline_WEIGHTS_LOOP_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln69 : IN STD_LOGIC_VECTOR (13 downto 0);
        NEURONS_MEMBRANE_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln69_1 : IN STD_LOGIC_VECTOR (13 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;


    component RNI_mul_16s_17ns_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component RNI_input_layer_BIASES_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component RNI_input_layer_WEIGHTS_INDEX_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    BIASES_U : component RNI_input_layer_BIASES_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 243,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => BIASES_address0,
        ce0 => BIASES_ce0,
        q0 => BIASES_q0);

    WEIGHTS_INDEX_U : component RNI_input_layer_WEIGHTS_INDEX_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 244,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WEIGHTS_INDEX_address0,
        ce0 => WEIGHTS_INDEX_ce0,
        q0 => WEIGHTS_INDEX_q0,
        address1 => WEIGHTS_INDEX_address1,
        ce1 => WEIGHTS_INDEX_ce1,
        q1 => WEIGHTS_INDEX_q1);

    grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179 : component RNI_input_layer_Pipeline_WEIGHTS_LOOP_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start,
        ap_done => grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_done,
        ap_idle => grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_idle,
        ap_ready => grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_ready,
        zext_ln69 => weight_index_reg_656,
        NEURONS_MEMBRANE_load_1 => NEURONS_MEMBRANE_load_1_reg_670,
        zext_ln69_1 => WEIGHTS_INDEX_load_reg_661,
        p_read => p_read,
        p_read1 => p_read1,
        p_read2 => p_read2,
        p_read3 => p_read3,
        p_out => grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out,
        p_out_ap_vld => grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out_ap_vld);

    mul_16s_17ns_33_1_1_U52 : component RNI_mul_16s_17ns_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 17,
        dout_WIDTH => 33)
    port map (
        din0 => NEURONS_MEMBRANE_load_reg_573,
        din1 => mul_ln171_fu_224_p1,
        dout => mul_ln171_fu_224_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln69_fu_496_p2 = ap_const_lv1_1))) then 
                    grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_ready = ap_const_logic_1)) then 
                    grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_28_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln69_fu_496_p2 = ap_const_lv1_0))) then 
                empty_28_reg_170 <= NEURONS_MEMBRANE_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln69_reg_666 = ap_const_lv1_1))) then 
                empty_28_reg_170 <= grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out;
            end if; 
        end if;
    end process;

    neuron_index_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                neuron_index_fu_70 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                neuron_index_fu_70 <= add_ln64_reg_556;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                BIASES_load_reg_623 <= BIASES_q0;
                leaked_membrane_2_reg_617 <= leaked_membrane_2_fu_404_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                NEURONS_MEMBRANE_addr_reg_568 <= zext_ln64_fu_216_p1(8 - 1 downto 0);
                    zext_ln64_reg_561(7 downto 0) <= zext_ln64_fu_216_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                NEURONS_MEMBRANE_load_1_reg_670 <= NEURONS_MEMBRANE_q0;
                WEIGHTS_INDEX_load_reg_661 <= WEIGHTS_INDEX_q0;
                icmp_ln69_reg_666 <= icmp_ln69_fu_496_p2;
                weight_index_reg_656 <= WEIGHTS_INDEX_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                NEURONS_MEMBRANE_load_reg_573 <= NEURONS_MEMBRANE_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln64_reg_556 <= add_ln64_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln67_1_reg_633 <= and_ln67_1_fu_467_p2;
                and_ln67_reg_629 <= and_ln67_fu_455_p2;
                xor_ln67_2_reg_637 <= xor_ln67_2_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                empty_reg_641 <= empty_fu_479_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln178_reg_676 <= icmp_ln178_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                leaked_membrane_reg_589 <= mul_ln171_fu_224_p2(31 downto 16);
                mul_ln171_reg_578 <= mul_ln171_fu_224_p2;
                tmp_2_reg_594 <= mul_ln171_fu_224_p2(31 downto 31);
                tmp_3_reg_600 <= mul_ln171_fu_224_p2(15 downto 15);
                tmp_5_reg_605 <= mul_ln171_fu_224_p2(32 downto 32);
                tmp_reg_583 <= mul_ln171_fu_224_p2(32 downto 32);
            end if;
        end if;
    end process;
    zext_ln64_reg_561(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln64_fu_204_p2, ap_CS_fsm_state9, icmp_ln69_fu_496_p2, grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln64_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln69_fu_496_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    BIASES_address0 <= zext_ln64_reg_561(8 - 1 downto 0);

    BIASES_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            BIASES_ce0 <= ap_const_logic_1;
        else 
            BIASES_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEMBRANE_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln64_fu_216_p1, NEURONS_MEMBRANE_addr_reg_568, and_ln67_reg_629, ap_CS_fsm_state6, and_ln67_1_reg_633, xor_ln67_2_reg_637, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_lv1_0 = and_ln67_reg_629) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_1_reg_633) and (xor_ln67_2_reg_637 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_reg_629) and (xor_ln67_2_reg_637 = ap_const_lv1_1)))) then 
            NEURONS_MEMBRANE_address0 <= NEURONS_MEMBRANE_addr_reg_568;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            NEURONS_MEMBRANE_address0 <= zext_ln64_fu_216_p1(8 - 1 downto 0);
        else 
            NEURONS_MEMBRANE_address0 <= "XXXXXXXX";
        end if; 
    end process;


    NEURONS_MEMBRANE_ce0_assign_proc : process(ap_CS_fsm_state2, and_ln67_reg_629, ap_CS_fsm_state6, and_ln67_1_reg_633, xor_ln67_2_reg_637, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_lv1_0 = and_ln67_reg_629) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_1_reg_633) and (xor_ln67_2_reg_637 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_reg_629) and (xor_ln67_2_reg_637 = ap_const_lv1_1)))) then 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEMBRANE_d0_assign_proc : process(and_ln67_reg_629, ap_CS_fsm_state6, and_ln67_1_reg_633, xor_ln67_2_reg_637, ap_CS_fsm_state7, ap_CS_fsm_state11, grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out, ap_CS_fsm_state12, add_ln67_1_fu_435_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            NEURONS_MEMBRANE_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            NEURONS_MEMBRANE_d0 <= grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_reg_629) and (xor_ln67_2_reg_637 = ap_const_lv1_1))) then 
            NEURONS_MEMBRANE_d0 <= ap_const_lv16_7FFF;
        elsif (((ap_const_lv1_0 = and_ln67_reg_629) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_1_reg_633) and (xor_ln67_2_reg_637 = ap_const_lv1_1))) then 
            NEURONS_MEMBRANE_d0 <= ap_const_lv16_8000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            NEURONS_MEMBRANE_d0 <= add_ln67_1_fu_435_p2;
        else 
            NEURONS_MEMBRANE_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    NEURONS_MEMBRANE_we0_assign_proc : process(and_ln67_reg_629, ap_CS_fsm_state6, and_ln67_1_reg_633, xor_ln67_2_reg_637, ap_CS_fsm_state7, icmp_ln69_reg_666, icmp_ln178_reg_676, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_lv1_0 = and_ln67_reg_629) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_1_reg_633) and (xor_ln67_2_reg_637 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln178_reg_676 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln69_reg_666 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln67_reg_629) and (xor_ln67_2_reg_637 = ap_const_lv1_1)))) then 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_STATE_address0 <= zext_ln64_reg_561(8 - 1 downto 0);

    NEURONS_STATE_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            NEURONS_STATE_ce0 <= ap_const_logic_1;
        else 
            NEURONS_STATE_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_STATE_d0 <= ap_const_lv1_1;

    NEURONS_STATE_we0_assign_proc : process(icmp_ln178_fu_507_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln178_fu_507_p2 = ap_const_lv1_1))) then 
            NEURONS_STATE_we0 <= ap_const_logic_1;
        else 
            NEURONS_STATE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    WEIGHTS_INDEX_address0 <= conv_i58_fu_491_p1(8 - 1 downto 0);
    WEIGHTS_INDEX_address1 <= zext_ln64_reg_561(8 - 1 downto 0);

    WEIGHTS_INDEX_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WEIGHTS_INDEX_ce0 <= ap_const_logic_1;
        else 
            WEIGHTS_INDEX_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WEIGHTS_INDEX_ce1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WEIGHTS_INDEX_ce1 <= ap_const_logic_1;
        else 
            WEIGHTS_INDEX_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_i_i70_fu_485_p2 <= std_logic_vector(unsigned(neuron_index_cast_cast_fu_482_p1) + unsigned(ap_const_lv8_1));
    add_ln64_fu_210_p2 <= std_logic_vector(unsigned(neuron_index_fu_70) + unsigned(ap_const_lv8_1));
    add_ln67_1_fu_435_p2 <= std_logic_vector(signed(leaked_membrane_2_reg_617) + signed(sext_ln67_2_fu_418_p1));
    add_ln67_fu_421_p2 <= std_logic_vector(signed(sext_ln67_fu_412_p1) + signed(sext_ln67_1_fu_415_p1));
    and_ln171_1_fu_334_p2 <= (tmp_5_reg_605 and or_ln171_4_fu_328_p2);
    and_ln171_2_fu_339_p2 <= (tmp_5_reg_605 and and_ln171_fu_294_p2);
    and_ln171_3_fu_361_p2 <= (xor_ln171_3_fu_356_p2 and or_ln171_fu_350_p2);
    and_ln171_4_fu_367_p2 <= (tmp_4_fu_280_p3 and and_ln171_1_fu_334_p2);
    and_ln171_5_fu_385_p2 <= (xor_ln171_5_fu_379_p2 and tmp_reg_583);
    and_ln171_fu_294_p2 <= (xor_ln171_fu_288_p2 and tmp_2_reg_594);
    and_ln67_1_fu_467_p2 <= (xor_ln67_1_fu_461_p2 and tmp_7_fu_427_p3);
    and_ln67_fu_455_p2 <= (xor_ln67_fu_449_p2 and tmp_8_fu_441_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_done)
    begin
        if ((grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln64_fu_204_p2)
    begin
        if ((((icmp_ln64_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_28_phi_fu_173_p4_assign_proc : process(icmp_ln69_reg_666, ap_CS_fsm_state11, grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out, empty_28_reg_170)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln69_reg_666 = ap_const_lv1_1))) then 
            ap_phi_mux_empty_28_phi_fu_173_p4 <= grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_p_out;
        else 
            ap_phi_mux_empty_28_phi_fu_173_p4 <= empty_28_reg_170;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln64_fu_204_p2)
    begin
        if (((icmp_ln64_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv_i58_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_i_i70_fu_485_p2),64));
    empty_fu_479_p1 <= neuron_index_fu_70(7 - 1 downto 0);
    grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start <= grp_input_layer_Pipeline_WEIGHTS_LOOP_0_fu_179_ap_start_reg;
    icmp_ln178_fu_507_p2 <= "1" when (signed(ap_phi_mux_empty_28_phi_fu_173_p4) > signed(ap_const_lv16_7E)) else "0";
    icmp_ln64_fu_204_p2 <= "1" when (neuron_index_fu_70 = ap_const_lv8_80) else "0";
    icmp_ln69_fu_496_p2 <= "1" when (unsigned(WEIGHTS_INDEX_q1) < unsigned(WEIGHTS_INDEX_q0)) else "0";
    leaked_membrane_1_fu_275_p2 <= std_logic_vector(unsigned(zext_ln171_fu_272_p1) + unsigned(leaked_membrane_reg_589));
    leaked_membrane_2_fu_404_p3 <= 
        select_ln171_fu_390_p3 when (or_ln171_1_fu_398_p2(0) = '1') else 
        leaked_membrane_1_fu_275_p2;
    mul_ln171_fu_224_p1 <= ap_const_lv33_E7A0(17 - 1 downto 0);
    neuron_index_cast_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_641),8));
    or_ln171_1_fu_398_p2 <= (and_ln171_5_fu_385_p2 or and_ln171_3_fu_361_p2);
    or_ln171_2_fu_304_p2 <= (xor_ln171_1_fu_299_p2 or tmp_4_fu_280_p3);
    or_ln171_3_fu_373_p2 <= (and_ln171_4_fu_367_p2 or and_ln171_2_fu_339_p2);
    or_ln171_4_fu_328_p2 <= (xor_ln171_6_fu_322_p2 or or_ln171_2_fu_304_p2);
    or_ln171_fu_350_p2 <= (xor_ln171_2_fu_344_p2 or tmp_4_fu_280_p3);
    select_ln171_fu_390_p3 <= 
        ap_const_lv16_7FFF when (and_ln171_3_fu_361_p2(0) = '1') else 
        ap_const_lv16_8000;
        sext_ln67_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(BIASES_load_reg_623),17));

        sext_ln67_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(BIASES_load_reg_623),16));

        sext_ln67_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(leaked_membrane_2_reg_617),17));

    tmp_4_fu_280_p3 <= leaked_membrane_1_fu_275_p2(15 downto 15);
    tmp_6_fu_315_p3 <= mul_ln171_reg_578(32 downto 32);
    tmp_7_fu_427_p3 <= add_ln67_fu_421_p2(16 downto 16);
    tmp_8_fu_441_p3 <= add_ln67_1_fu_435_p2(15 downto 15);
    xor_ln171_1_fu_299_p2 <= (tmp_2_reg_594 xor ap_const_lv1_1);
    xor_ln171_2_fu_344_p2 <= (xor_ln171_4_fu_310_p2 xor ap_const_lv1_1);
    xor_ln171_3_fu_356_p2 <= (tmp_reg_583 xor ap_const_lv1_1);
    xor_ln171_4_fu_310_p2 <= (tmp_5_reg_605 xor or_ln171_2_fu_304_p2);
    xor_ln171_5_fu_379_p2 <= (or_ln171_3_fu_373_p2 xor ap_const_lv1_1);
    xor_ln171_6_fu_322_p2 <= (tmp_6_fu_315_p3 xor ap_const_lv1_1);
    xor_ln171_fu_288_p2 <= (tmp_4_fu_280_p3 xor ap_const_lv1_1);
    xor_ln67_1_fu_461_p2 <= (tmp_8_fu_441_p3 xor ap_const_lv1_1);
    xor_ln67_2_fu_473_p2 <= (tmp_8_fu_441_p3 xor tmp_7_fu_427_p3);
    xor_ln67_fu_449_p2 <= (tmp_7_fu_427_p3 xor ap_const_lv1_1);
    zext_ln171_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_600),16));
    zext_ln64_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_index_fu_70),64));
end behav;
