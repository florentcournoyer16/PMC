-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI_RNI_Pipeline_WEIGHTS_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln93 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln91 : IN STD_LOGIC_VECTOR (6 downto 0);
    zext_ln93_1 : IN STD_LOGIC_VECTOR (14 downto 0);
    input_list_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_list_ce0 : OUT STD_LOGIC;
    input_list_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    neuron_index_cast1_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    p_0_0_0185_i_phi_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_0_0_0185_i_phi_out_ap_vld : OUT STD_LOGIC;
    WEIGHTS_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    WEIGHTS_ce0 : OUT STD_LOGIC;
    WEIGHTS_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_MEMBRANE_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    NEURONS_MEMBRANE_ce0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_we0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_MEMBRANE_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    NEURONS_MEMBRANE_ce1 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of RNI_RNI_Pipeline_WEIGHTS_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln93_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal neuron_index_cast1_cast_cast_fu_149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal neuron_index_cast1_cast_cast_reg_299 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln93_1_cast_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_1_cast_reg_304 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_cast_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_cast_reg_309 : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_index_3_reg_315 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln93_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_320_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln95_fu_216_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln95_reg_334 : STD_LOGIC_VECTOR (8 downto 0);
    signal NEURONS_MEMBRANE_addr_reg_339 : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_cmp_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_349 : STD_LOGIC_VECTOR (0 downto 0);
    signal NEURONS_MEMBRANE_load_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln95_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_1_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_52 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_56 : STD_LOGIC_VECTOR (7 downto 0);
    signal reuse_select_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_0_0185_i_phi_fu_60 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_index_fu_64 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln93_fu_221_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_cast_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln95_fu_189_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln95_fu_198_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln95_fu_206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln95_fu_212_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component RNI_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    reuse_addr_reg_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_addr_reg_fu_52 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln93_reg_320 = ap_const_lv1_0))) then 
                reuse_addr_reg_fu_52 <= zext_ln91_cast_reg_309;
            end if; 
        end if;
    end process;

    reuse_reg_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_reg_fu_56 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_reg_fu_56 <= reuse_select_fu_251_p3;
            end if; 
        end if;
    end process;

    weight_index_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    weight_index_fu_64 <= zext_ln93_cast_fu_161_p1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln93_reg_320 = ap_const_lv1_0))) then 
                    weight_index_fu_64 <= add_ln93_fu_221_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    NEURONS_MEMBRANE_addr_reg_339(6 downto 0) <= zext_ln91_cast_reg_309(9 - 1 downto 0)(6 downto 0);
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln93_reg_320 <= icmp_ln93_fu_184_p2;
                icmp_ln93_reg_320_pp0_iter1_reg <= icmp_ln93_reg_320;
                weight_index_3_reg_315 <= weight_index_fu_64;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln93_reg_320_pp0_iter1_reg = ap_const_lv1_0))) then
                NEURONS_MEMBRANE_load_reg_354 <= NEURONS_MEMBRANE_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln93_reg_320 = ap_const_lv1_0))) then
                add_ln95_reg_334 <= add_ln95_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln93_reg_320 = ap_const_lv1_0))) then
                addr_cmp_reg_349 <= addr_cmp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    neuron_index_cast1_cast_cast_reg_299(6 downto 0) <= neuron_index_cast1_cast_cast_fu_149_p1(6 downto 0);
                    zext_ln91_cast_reg_309(6 downto 0) <= zext_ln91_cast_fu_157_p1(6 downto 0);
                    zext_ln93_1_cast_reg_304(14 downto 0) <= zext_ln93_1_cast_fu_153_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_0_0_0185_i_phi_fu_60 <= reuse_select_fu_251_p3;
            end if;
        end if;
    end process;
    neuron_index_cast1_cast_cast_reg_299(8 downto 7) <= "00";
    zext_ln93_1_cast_reg_304(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln91_cast_reg_309(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    NEURONS_MEMBRANE_addr_reg_339(8 downto 7) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    NEURONS_MEMBRANE_address0 <= NEURONS_MEMBRANE_addr_reg_339;
    NEURONS_MEMBRANE_address1 <= zext_ln95_1_fu_231_p1(9 - 1 downto 0);

    NEURONS_MEMBRANE_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEMBRANE_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            NEURONS_MEMBRANE_ce1 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_MEMBRANE_d0 <= 
        reuse_reg_fu_56 when (addr_cmp_reg_349(0) = '1') else 
        NEURONS_MEMBRANE_load_reg_354;

    NEURONS_MEMBRANE_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    WEIGHTS_address0 <= weight_index_fu_64(15 - 1 downto 0);

    WEIGHTS_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln93_fu_221_p2 <= std_logic_vector(unsigned(weight_index_3_reg_315) + unsigned(ap_const_lv64_1));
    add_ln95_fu_216_p2 <= std_logic_vector(unsigned(neuron_index_cast1_cast_cast_reg_299) + unsigned(sext_ln95_fu_212_p1));
    addr_cmp_fu_238_p2 <= "1" when (reuse_addr_reg_fu_52 = zext_ln95_1_fu_231_p1) else "0";
    and_ln95_fu_206_p2 <= (select_ln95_fu_198_p3 and WEIGHTS_q0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln93_fu_184_p2)
    begin
        if (((icmp_ln93_fu_184_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln93_reg_320)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln93_reg_320 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln93_fu_184_p2 <= "1" when (weight_index_fu_64 = zext_ln93_1_cast_reg_304) else "0";
    input_list_address0 <= zext_ln95_fu_193_p1(3 - 1 downto 0);

    input_list_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_list_ce0 <= ap_const_logic_1;
        else 
            input_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neuron_index_cast1_cast_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_index_cast1_cast),9));
    p_0_0_0185_i_phi_out <= p_0_0_0185_i_phi_fu_60;

    p_0_0_0185_i_phi_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln93_reg_320)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln93_reg_320 = ap_const_lv1_1))) then 
            p_0_0_0185_i_phi_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0185_i_phi_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_251_p3 <= 
        reuse_reg_fu_56 when (addr_cmp_reg_349(0) = '1') else 
        NEURONS_MEMBRANE_load_reg_354;
    select_ln95_fu_198_p3 <= 
        ap_const_lv8_FF when (input_list_q0(0) = '1') else 
        ap_const_lv8_0;
        sext_ln95_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln95_fu_206_p2),9));

    trunc_ln95_fu_189_p1 <= weight_index_fu_64(3 - 1 downto 0);
    zext_ln91_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln91),64));
    zext_ln93_1_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln93_1),64));
    zext_ln93_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln93),64));
    zext_ln95_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_reg_334),64));
    zext_ln95_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln95_fu_189_p1),64));
end behav;
