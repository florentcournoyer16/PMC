-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI_exp_core_32_32_66_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_val : IN STD_LOGIC_VECTOR (34 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of RNI_exp_core_32_32_66_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv65_80000000 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_const_lv63_80000000 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal f_x_msb_4_table_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_4_table_ce0 : STD_LOGIC;
    signal f_x_msb_4_table_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_5_table_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_5_table_ce0 : STD_LOGIC;
    signal f_x_msb_5_table_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_x_msb_3_table_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_3_table_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_q0 : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_2_table_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_x_msb_1_table_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_q0 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_1_reg_643 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_reg_643_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_643_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_msb_ind_2_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_2_reg_648_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_reg_654_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_4_fu_247_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_4_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_4_reg_661_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_4_reg_661_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_5_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_5_reg_666 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_5_reg_666_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_5_reg_666_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1842_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1842_reg_678_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_x_msb_4_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_4_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_4_reg_684_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_5_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_710 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln9_reg_715 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_fu_354_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_reg_725 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter5_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter6_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter7_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter8_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter9_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal f_x_msb_3_reg_731 : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_reg_731_pp0_iter6_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_reg_731_pp0_iter7_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_reg_731_pp0_iter8_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_reg_731_pp0_iter9_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_3_reg_736 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_reg_751 : STD_LOGIC_VECTOR (43 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_fu_445_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_reg_761 : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter11_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter12_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter13_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter14_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter15_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_2_m_1_h_fu_468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_h_reg_767 : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_h_reg_767_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_h_reg_767_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_h_reg_767_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_h_reg_767_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_h_reg_767_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1998_fu_474_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1998_reg_773 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1998_reg_773_pp0_iter11_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1998_reg_773_pp0_iter12_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1998_reg_773_pp0_iter13_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1998_reg_773_pp0_iter14_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1998_reg_773_pp0_iter15_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln1_reg_789 : STD_LOGIC_VECTOR (61 downto 0);
    signal exp_x_msb_2_3_4_5_lsb_m_1_fu_547_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal exp_x_msb_2_3_4_5_lsb_m_1_reg_799 : STD_LOGIC_VECTOR (71 downto 0);
    signal exp_x_msb_1_reg_804 : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_reg_804_pp0_iter17_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_reg_804_pp0_iter18_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_reg_804_pp0_iter19_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_reg_804_pp0_iter20_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_reg_804_pp0_iter21_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal y_lo_s_reg_820 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_4_reg_825 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_reg_830 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1743_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1812_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1914_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1992_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2070_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (66 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal x_msb_5_lsb_fu_282_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1818_fu_296_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1818_fu_296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1818_fu_296_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1828_fu_326_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1829_fu_329_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m3_1_fu_332_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1833_fu_338_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m4_fu_342_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1836_fu_347_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1837_fu_350_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_3_m_1_s_fu_378_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_2_fu_370_p4 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal exp_x_msb_3_m_1_fu_410_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_5_fu_425_p5 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln1923_1_fu_421_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1923_fu_418_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln1923_fu_439_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1923_2_fu_435_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal f_x_msb_2_h_fu_451_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1995_1_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1995_fu_461_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_x_msb_2_m_1_fu_478_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln1660_fu_493_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (129 downto 0);
    signal x_msb_ind_1_fu_496_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_522_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal zext_ln2002_2_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2002_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2002_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2002_3_fu_543_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal zext_ln2002_1_fu_530_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (139 downto 0);
    signal y_l_fu_571_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal y_fu_575_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1632_fu_585_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal trunc_ln2_fu_589_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal y_1_fu_599_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln1632_fu_605_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal overf_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to22 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_201_p00 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_201_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_205_p00 : STD_LOGIC_VECTOR (100 downto 0);
    signal grp_fu_205_p10 : STD_LOGIC_VECTOR (100 downto 0);
    signal grp_fu_209_p00 : STD_LOGIC_VECTOR (129 downto 0);
    signal grp_fu_209_p10 : STD_LOGIC_VECTOR (129 downto 0);
    signal grp_fu_213_p00 : STD_LOGIC_VECTOR (139 downto 0);
    signal grp_fu_213_p10 : STD_LOGIC_VECTOR (139 downto 0);
    signal mul_ln1818_fu_296_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1818_fu_296_p10 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component RNI_mul_32ns_8ns_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component RNI_mul_51ns_50ns_101_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (100 downto 0) );
    end component;


    component RNI_mul_67ns_63ns_130_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (66 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (129 downto 0) );
    end component;


    component RNI_mul_72ns_68ns_140_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (67 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (139 downto 0) );
    end component;


    component RNI_mul_25ns_8ns_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component RNI_exp_core_32_32_66_s_f_x_msb_4_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RNI_exp_core_32_32_66_s_f_x_msb_5_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component RNI_exp_core_32_32_66_s_f_x_msb_3_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component RNI_exp_core_32_32_66_s_f_x_msb_2_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RNI_exp_core_32_32_66_s_exp_x_msb_1_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;



begin
    f_x_msb_4_table_U : component RNI_exp_core_32_32_66_s_f_x_msb_4_table_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_table_address0,
        ce0 => f_x_msb_4_table_ce0,
        q0 => f_x_msb_4_table_q0);

    f_x_msb_5_table_U : component RNI_exp_core_32_32_66_s_f_x_msb_5_table_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_5_table_address0,
        ce0 => f_x_msb_5_table_ce0,
        q0 => f_x_msb_5_table_q0);

    f_x_msb_3_table_U : component RNI_exp_core_32_32_66_s_f_x_msb_3_table_ROM_AUTO_1R
    generic map (
        DataWidth => 51,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_address0,
        ce0 => f_x_msb_3_table_ce0,
        q0 => f_x_msb_3_table_q0);

    f_x_msb_2_table_U : component RNI_exp_core_32_32_66_s_f_x_msb_2_table_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_address0,
        ce0 => f_x_msb_2_table_ce0,
        q0 => f_x_msb_2_table_q0);

    exp_x_msb_1_table_U : component RNI_exp_core_32_32_66_s_exp_x_msb_1_table_ROM_AUTO_1R
    generic map (
        DataWidth => 68,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_address0,
        ce0 => exp_x_msb_1_table_ce0,
        q0 => exp_x_msb_1_table_q0);

    mul_32ns_8ns_40_2_1_U1 : component RNI_mul_32ns_8ns_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    mul_51ns_50ns_101_5_1_U2 : component RNI_mul_51ns_50ns_101_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 51,
        din1_WIDTH => 50,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    mul_67ns_63ns_130_5_1_U3 : component RNI_mul_67ns_63ns_130_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 67,
        din1_WIDTH => 63,
        dout_WIDTH => 130)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    mul_72ns_68ns_140_5_1_U4 : component RNI_mul_72ns_68ns_140_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 72,
        din1_WIDTH => 68,
        dout_WIDTH => 140)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    mul_25ns_8ns_33_1_1_U5 : component RNI_mul_25ns_8ns_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        dout_WIDTH => 33)
    port map (
        din0 => mul_ln1818_fu_296_p0,
        din1 => mul_ln1818_fu_296_p1,
        dout => mul_ln1818_fu_296_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_reg_804 <= exp_x_msb_1_table_q0;
                exp_x_msb_1_reg_804_pp0_iter17_reg <= exp_x_msb_1_reg_804;
                exp_x_msb_1_reg_804_pp0_iter18_reg <= exp_x_msb_1_reg_804_pp0_iter17_reg;
                exp_x_msb_1_reg_804_pp0_iter19_reg <= exp_x_msb_1_reg_804_pp0_iter18_reg;
                exp_x_msb_1_reg_804_pp0_iter20_reg <= exp_x_msb_1_reg_804_pp0_iter19_reg;
                exp_x_msb_1_reg_804_pp0_iter21_reg <= exp_x_msb_1_reg_804_pp0_iter20_reg;
                exp_x_msb_2_3_4_5_lsb_m_1_reg_799 <= exp_x_msb_2_3_4_5_lsb_m_1_fu_547_p2;
                exp_x_msb_2_m_1_h_reg_767 <= exp_x_msb_2_m_1_h_fu_468_p2;
                exp_x_msb_2_m_1_h_reg_767_pp0_iter11_reg <= exp_x_msb_2_m_1_h_reg_767;
                exp_x_msb_2_m_1_h_reg_767_pp0_iter12_reg <= exp_x_msb_2_m_1_h_reg_767_pp0_iter11_reg;
                exp_x_msb_2_m_1_h_reg_767_pp0_iter13_reg <= exp_x_msb_2_m_1_h_reg_767_pp0_iter12_reg;
                exp_x_msb_2_m_1_h_reg_767_pp0_iter14_reg <= exp_x_msb_2_m_1_h_reg_767_pp0_iter13_reg;
                exp_x_msb_2_m_1_h_reg_767_pp0_iter15_reg <= exp_x_msb_2_m_1_h_reg_767_pp0_iter14_reg;
                exp_x_msb_3_4_5_lsb_m_1_reg_761 <= exp_x_msb_3_4_5_lsb_m_1_fu_445_p2;
                exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter11_reg <= exp_x_msb_3_4_5_lsb_m_1_reg_761;
                exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter12_reg <= exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter11_reg;
                exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter13_reg <= exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter12_reg;
                exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter14_reg <= exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter13_reg;
                exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter15_reg <= exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter14_reg;
                exp_x_msb_4_5_lsb_m_1_m5_1_reg_725 <= exp_x_msb_4_5_lsb_m_1_m5_1_fu_354_p2;
                exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter5_reg <= exp_x_msb_4_5_lsb_m_1_m5_1_reg_725;
                exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter6_reg <= exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter5_reg;
                exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter7_reg <= exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter6_reg;
                exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter8_reg <= exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter7_reg;
                exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter9_reg <= exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter8_reg;
                f_x_msb_3_reg_731 <= f_x_msb_3_table_q0;
                f_x_msb_3_reg_731_pp0_iter5_reg <= f_x_msb_3_reg_731;
                f_x_msb_3_reg_731_pp0_iter6_reg <= f_x_msb_3_reg_731_pp0_iter5_reg;
                f_x_msb_3_reg_731_pp0_iter7_reg <= f_x_msb_3_reg_731_pp0_iter6_reg;
                f_x_msb_3_reg_731_pp0_iter8_reg <= f_x_msb_3_reg_731_pp0_iter7_reg;
                f_x_msb_3_reg_731_pp0_iter9_reg <= f_x_msb_3_reg_731_pp0_iter8_reg;
                f_x_msb_4_reg_684_pp0_iter2_reg <= f_x_msb_4_reg_684;
                f_x_msb_4_reg_684_pp0_iter3_reg <= f_x_msb_4_reg_684_pp0_iter2_reg;
                f_x_msb_5_reg_705 <= f_x_msb_5_table_q0;
                tmp_1_reg_643_pp0_iter10_reg <= tmp_1_reg_643_pp0_iter9_reg;
                tmp_1_reg_643_pp0_iter11_reg <= tmp_1_reg_643_pp0_iter10_reg;
                tmp_1_reg_643_pp0_iter12_reg <= tmp_1_reg_643_pp0_iter11_reg;
                tmp_1_reg_643_pp0_iter13_reg <= tmp_1_reg_643_pp0_iter12_reg;
                tmp_1_reg_643_pp0_iter14_reg <= tmp_1_reg_643_pp0_iter13_reg;
                tmp_1_reg_643_pp0_iter2_reg <= tmp_1_reg_643_pp0_iter1_reg;
                tmp_1_reg_643_pp0_iter3_reg <= tmp_1_reg_643_pp0_iter2_reg;
                tmp_1_reg_643_pp0_iter4_reg <= tmp_1_reg_643_pp0_iter3_reg;
                tmp_1_reg_643_pp0_iter5_reg <= tmp_1_reg_643_pp0_iter4_reg;
                tmp_1_reg_643_pp0_iter6_reg <= tmp_1_reg_643_pp0_iter5_reg;
                tmp_1_reg_643_pp0_iter7_reg <= tmp_1_reg_643_pp0_iter6_reg;
                tmp_1_reg_643_pp0_iter8_reg <= tmp_1_reg_643_pp0_iter7_reg;
                tmp_1_reg_643_pp0_iter9_reg <= tmp_1_reg_643_pp0_iter8_reg;
                tmp_3_reg_736 <= f_x_msb_3_table_q0(50 downto 12);
                tmp_4_reg_825 <= y_1_fu_599_p2(64 downto 63);
                tmp_8_reg_830 <= add_ln1632_fu_605_p2(62 downto 32);
                tmp_reg_751 <= grp_fu_205_p2(100 downto 57);
                trunc_ln1842_reg_678_pp0_iter2_reg <= trunc_ln1842_reg_678_pp0_iter1_reg;
                trunc_ln1842_reg_678_pp0_iter3_reg <= trunc_ln1842_reg_678_pp0_iter2_reg;
                trunc_ln1842_reg_678_pp0_iter4_reg <= trunc_ln1842_reg_678_pp0_iter3_reg;
                trunc_ln1842_reg_678_pp0_iter5_reg <= trunc_ln1842_reg_678_pp0_iter4_reg;
                trunc_ln1842_reg_678_pp0_iter6_reg <= trunc_ln1842_reg_678_pp0_iter5_reg;
                trunc_ln1842_reg_678_pp0_iter7_reg <= trunc_ln1842_reg_678_pp0_iter6_reg;
                trunc_ln1842_reg_678_pp0_iter8_reg <= trunc_ln1842_reg_678_pp0_iter7_reg;
                trunc_ln1842_reg_678_pp0_iter9_reg <= trunc_ln1842_reg_678_pp0_iter8_reg;
                trunc_ln1998_reg_773 <= trunc_ln1998_fu_474_p1;
                trunc_ln1998_reg_773_pp0_iter11_reg <= trunc_ln1998_reg_773;
                trunc_ln1998_reg_773_pp0_iter12_reg <= trunc_ln1998_reg_773_pp0_iter11_reg;
                trunc_ln1998_reg_773_pp0_iter13_reg <= trunc_ln1998_reg_773_pp0_iter12_reg;
                trunc_ln1998_reg_773_pp0_iter14_reg <= trunc_ln1998_reg_773_pp0_iter13_reg;
                trunc_ln1998_reg_773_pp0_iter15_reg <= trunc_ln1998_reg_773_pp0_iter14_reg;
                trunc_ln1_reg_789 <= grp_fu_209_p2(129 downto 68);
                trunc_ln9_reg_715 <= mul_ln1818_fu_296_p2(32 downto 8);
                trunc_ln_reg_710 <= grp_fu_201_p2(39 downto 34);
                x_msb_ind_2_reg_648_pp0_iter2_reg <= x_msb_ind_2_reg_648_pp0_iter1_reg;
                x_msb_ind_2_reg_648_pp0_iter3_reg <= x_msb_ind_2_reg_648_pp0_iter2_reg;
                x_msb_ind_2_reg_648_pp0_iter4_reg <= x_msb_ind_2_reg_648_pp0_iter3_reg;
                x_msb_ind_2_reg_648_pp0_iter5_reg <= x_msb_ind_2_reg_648_pp0_iter4_reg;
                x_msb_ind_2_reg_648_pp0_iter6_reg <= x_msb_ind_2_reg_648_pp0_iter5_reg;
                x_msb_ind_2_reg_648_pp0_iter7_reg <= x_msb_ind_2_reg_648_pp0_iter6_reg;
                x_msb_ind_2_reg_648_pp0_iter8_reg <= x_msb_ind_2_reg_648_pp0_iter7_reg;
                x_msb_ind_2_reg_648_pp0_iter9_reg <= x_msb_ind_2_reg_648_pp0_iter8_reg;
                x_msb_ind_3_reg_654_pp0_iter2_reg <= x_msb_ind_3_reg_654_pp0_iter1_reg;
                x_msb_ind_3_reg_654_pp0_iter3_reg <= x_msb_ind_3_reg_654_pp0_iter2_reg;
                x_msb_ind_3_reg_654_pp0_iter4_reg <= x_msb_ind_3_reg_654_pp0_iter3_reg;
                x_msb_ind_3_reg_654_pp0_iter5_reg <= x_msb_ind_3_reg_654_pp0_iter4_reg;
                x_msb_ind_3_reg_654_pp0_iter6_reg <= x_msb_ind_3_reg_654_pp0_iter5_reg;
                x_msb_ind_3_reg_654_pp0_iter7_reg <= x_msb_ind_3_reg_654_pp0_iter6_reg;
                x_msb_ind_3_reg_654_pp0_iter8_reg <= x_msb_ind_3_reg_654_pp0_iter7_reg;
                x_msb_ind_3_reg_654_pp0_iter9_reg <= x_msb_ind_3_reg_654_pp0_iter8_reg;
                x_msb_ind_4_reg_661_pp0_iter2_reg <= x_msb_ind_4_reg_661_pp0_iter1_reg;
                x_msb_ind_5_reg_666_pp0_iter2_reg <= x_msb_ind_5_reg_666_pp0_iter1_reg;
                y_lo_s_reg_820 <= grp_fu_213_p2(139 downto 72);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                f_x_msb_4_reg_684 <= f_x_msb_4_table_q0;
                tmp_1_reg_643 <= x_val(34 downto 32);
                tmp_1_reg_643_pp0_iter1_reg <= tmp_1_reg_643;
                trunc_ln1842_reg_678 <= trunc_ln1842_fu_266_p1;
                trunc_ln1842_reg_678_pp0_iter1_reg <= trunc_ln1842_reg_678;
                x_msb_ind_2_reg_648 <= x_val(31 downto 24);
                x_msb_ind_2_reg_648_pp0_iter1_reg <= x_msb_ind_2_reg_648;
                x_msb_ind_3_reg_654 <= x_val(23 downto 16);
                x_msb_ind_3_reg_654_pp0_iter1_reg <= x_msb_ind_3_reg_654;
                x_msb_ind_4_reg_661 <= x_val(15 downto 8);
                x_msb_ind_4_reg_661_pp0_iter1_reg <= x_msb_ind_4_reg_661;
                x_msb_ind_5_reg_666 <= x_msb_ind_5_fu_257_p1;
                x_msb_ind_5_reg_666_pp0_iter1_reg <= x_msb_ind_5_reg_666;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1632_fu_605_p2 <= std_logic_vector(unsigned(trunc_ln2_fu_589_p4) + unsigned(ap_const_lv63_80000000));
    add_ln1923_fu_439_p2 <= std_logic_vector(unsigned(zext_ln1923_1_fu_421_p1) + unsigned(zext_ln1923_fu_418_p1));
    add_ln2002_fu_537_p2 <= std_logic_vector(unsigned(zext_ln2002_2_fu_534_p1) + unsigned(zext_ln2002_fu_519_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to22_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to22 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to22)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to22 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv31_7FFFFFFF when (overf_fu_631_p2(0) = '1') else 
        tmp_8_reg_830;
    exp_x_msb_1_table_address0 <= zext_ln2070_fu_514_p1(8 - 1 downto 0);

    exp_x_msb_1_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_x_msb_1_table_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_3_4_5_lsb_m_1_fu_547_p2 <= std_logic_vector(unsigned(zext_ln2002_3_fu_543_p1) + unsigned(zext_ln2002_1_fu_530_p1));
    exp_x_msb_2_m_1_fu_478_p3 <= (exp_x_msb_2_m_1_h_reg_767 & trunc_ln1998_reg_773);
    exp_x_msb_2_m_1_h_fu_468_p2 <= std_logic_vector(unsigned(zext_ln1995_1_fu_465_p1) + unsigned(zext_ln1995_fu_461_p1));
    exp_x_msb_3_4_5_lsb_m_1_fu_445_p2 <= std_logic_vector(unsigned(add_ln1923_fu_439_p2) + unsigned(zext_ln1923_2_fu_435_p1));
    exp_x_msb_3_m_1_fu_410_p4 <= ((x_msb_ind_3_reg_654_pp0_iter9_reg & ap_const_lv3_0) & f_x_msb_3_reg_731_pp0_iter9_reg);
    exp_x_msb_3_m_1_s_fu_378_p4 <= ((x_msb_ind_3_reg_654_pp0_iter4_reg & ap_const_lv3_0) & tmp_3_reg_736);
    exp_x_msb_4_5_lsb_m_1_m3_1_fu_332_p2 <= std_logic_vector(unsigned(zext_ln1828_fu_326_p1) + unsigned(zext_ln1829_fu_329_p1));
    exp_x_msb_4_5_lsb_m_1_m4_fu_342_p2 <= std_logic_vector(unsigned(trunc_ln9_reg_715) + unsigned(zext_ln1833_fu_338_p1));
    exp_x_msb_4_5_lsb_m_1_m5_1_fu_354_p2 <= std_logic_vector(unsigned(zext_ln1836_fu_347_p1) + unsigned(zext_ln1837_fu_350_p1));
    f_x_msb_2_h_fu_451_p4 <= f_x_msb_2_table_q0(63 downto 58);
    f_x_msb_2_table_address0 <= zext_ln1992_fu_406_p1(8 - 1 downto 0);

    f_x_msb_2_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_2_table_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_address0 <= zext_ln1914_fu_322_p1(8 - 1 downto 0);

    f_x_msb_3_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_3_table_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_table_address0 <= zext_ln1743_fu_261_p1(8 - 1 downto 0);

    f_x_msb_4_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_4_table_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_5_table_address0 <= zext_ln1812_fu_270_p1(8 - 1 downto 0);

    f_x_msb_5_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_5_table_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_5_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_201_p0 <= grp_fu_201_p00(32 - 1 downto 0);
    grp_fu_201_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_4_reg_684),40));
    grp_fu_201_p1 <= grp_fu_201_p10(8 - 1 downto 0);
    grp_fu_201_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_5_reg_666_pp0_iter1_reg),40));
    grp_fu_205_p0 <= grp_fu_205_p00(51 - 1 downto 0);
    grp_fu_205_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_370_p4),101));
    grp_fu_205_p1 <= grp_fu_205_p10(50 - 1 downto 0);
    grp_fu_205_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_m_1_s_fu_378_p4),101));
    grp_fu_209_p0 <= grp_fu_209_p00(67 - 1 downto 0);
    grp_fu_209_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_m_1_fu_478_p3),130));
    grp_fu_209_p1 <= grp_fu_209_p10(63 - 1 downto 0);
    grp_fu_209_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_5_lsb_m_1_reg_761),130));
    grp_fu_213_p0 <= grp_fu_213_p00(72 - 1 downto 0);
    grp_fu_213_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_5_lsb_m_1_reg_799),140));
    grp_fu_213_p1 <= grp_fu_213_p10(68 - 1 downto 0);
    grp_fu_213_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_reg_804),140));
    mul_ln1818_fu_296_p0 <= mul_ln1818_fu_296_p00(25 - 1 downto 0);
    mul_ln1818_fu_296_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_5_lsb_fu_282_p3),33));
    mul_ln1818_fu_296_p1 <= mul_ln1818_fu_296_p10(8 - 1 downto 0);
    mul_ln1818_fu_296_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_4_reg_661_pp0_iter2_reg),33));
    overf_fu_631_p2 <= "0" when (tmp_4_reg_825 = ap_const_lv2_0) else "1";
    shl_ln_fu_522_p4 <= ((exp_x_msb_2_m_1_h_reg_767_pp0_iter15_reg & trunc_ln1998_reg_773_pp0_iter15_reg) & ap_const_lv4_0);
    tmp_2_fu_370_p4 <= ((trunc_ln1842_reg_678_pp0_iter4_reg & ap_const_lv2_0) & exp_x_msb_4_5_lsb_m_1_m5_1_reg_725);
    tmp_5_fu_425_p5 <= (((trunc_ln1842_reg_678_pp0_iter9_reg & ap_const_lv2_0) & exp_x_msb_4_5_lsb_m_1_m5_1_reg_725_pp0_iter9_reg) & ap_const_lv3_0);
    trunc_ln1842_fu_266_p1 <= x_val(16 - 1 downto 0);
    trunc_ln1998_fu_474_p1 <= f_x_msb_2_table_q0(58 - 1 downto 0);
    trunc_ln2_fu_589_p4 <= y_l_fu_571_p2(66 downto 4);
    x_msb_5_lsb_fu_282_p3 <= (x_msb_ind_5_reg_666_pp0_iter2_reg & ap_const_lv17_0);
    x_msb_ind_1_fu_496_p3 <= (ap_const_lv1_0 & zext_ln1660_fu_493_p1);
    x_msb_ind_4_fu_247_p4 <= x_val(15 downto 8);
    x_msb_ind_5_fu_257_p1 <= x_val(8 - 1 downto 0);
    y_1_fu_599_p2 <= std_logic_vector(unsigned(zext_ln1632_fu_585_p1) + unsigned(ap_const_lv65_80000000));
    y_fu_575_p4 <= y_l_fu_571_p2(67 downto 4);
    y_l_fu_571_p2 <= std_logic_vector(unsigned(exp_x_msb_1_reg_804_pp0_iter21_reg) + unsigned(y_lo_s_reg_820));
    zext_ln1632_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_575_p4),65));
    zext_ln1660_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_643_pp0_iter14_reg),7));
    zext_ln1743_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_4_fu_247_p4),64));
    zext_ln1812_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_5_reg_666_pp0_iter1_reg),64));
    zext_ln1828_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_5_reg_705),17));
    zext_ln1829_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_710),17));
    zext_ln1833_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_4_5_lsb_m_1_m3_1_fu_332_p2),25));
    zext_ln1836_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_4_reg_684_pp0_iter3_reg),33));
    zext_ln1837_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_4_5_lsb_m_1_m4_fu_342_p2),33));
    zext_ln1914_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_3_reg_654_pp0_iter2_reg),64));
    zext_ln1923_1_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_m_1_fu_410_p4),63));
    zext_ln1923_2_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_425_p5),63));
    zext_ln1923_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_751),63));
    zext_ln1992_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_2_reg_648_pp0_iter8_reg),64));
    zext_ln1995_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_2_reg_648_pp0_iter9_reg),9));
    zext_ln1995_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_2_h_fu_451_p4),9));
    zext_ln2002_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_522_p4),72));
    zext_ln2002_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_5_lsb_m_1_reg_761_pp0_iter15_reg),64));
    zext_ln2002_3_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2002_fu_537_p2),72));
    zext_ln2002_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_reg_789),64));
    zext_ln2070_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_1_fu_496_p3),64));
end behav;
