-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI_inner_layer_1_Pipeline_WEIGHTS_LOOP_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln87 : IN STD_LOGIC_VECTOR (13 downto 0);
    zext_ln82 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln87_1 : IN STD_LOGIC_VECTOR (13 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_STATE_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_STATE_ce0 : OUT STD_LOGIC;
    NEURONS_STATE_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    NEURONS_MEMBRANE_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    NEURONS_MEMBRANE_ce0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_we0 : OUT STD_LOGIC;
    NEURONS_MEMBRANE_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    NEURONS_MEMBRANE_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of RNI_inner_layer_1_Pipeline_WEIGHTS_LOOP_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln87_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal WEIGHTS_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal WEIGHTS_ce0 : STD_LOGIC;
    signal WEIGHTS_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln87_1_cast_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_1_cast_reg_255 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_cast_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_cast_reg_260 : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_index_4_reg_265 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal NEURONS_MEMBRANE_addr_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln87_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal neuron_state_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln92_1_fu_199_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln92_1_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal and_ln92_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_1_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_1_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln92_2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln92_2_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln89_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal weight_index_fu_56 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln87_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_cast_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln89_fu_149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln89_fu_153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln92_fu_173_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal sext_ln92_1_fu_177_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln92_2_fu_181_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln92_fu_173_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln92_1_fu_177_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln92_fu_185_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln92_1_fu_199_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln92_2_fu_181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln92_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln92_1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_331 : BOOLEAN;
    signal ap_condition_337 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_input_layer_Pipeline_WEIGHTS_LOOP_0_WEIGHTS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component RNI_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    WEIGHTS_U : component RNI_input_layer_Pipeline_WEIGHTS_LOOP_0_WEIGHTS_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 11312,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WEIGHTS_address0,
        ce0 => WEIGHTS_ce0,
        q0 => WEIGHTS_q0);

    flow_control_loop_pipe_sequential_init_U : component RNI_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    weight_index_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                weight_index_fu_56 <= zext_ln87_cast_fu_132_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln87_reg_276 = ap_const_lv1_1))) then 
                weight_index_fu_56 <= add_ln87_fu_163_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                NEURONS_MEMBRANE_addr_reg_271 <= zext_ln82_cast_reg_260(8 - 1 downto 0);
                icmp_ln87_reg_276 <= icmp_ln87_fu_144_p2;
                weight_index_4_reg_265 <= weight_index_fu_56;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (neuron_state_reg_285 = ap_const_lv1_1) and (icmp_ln87_reg_276 = ap_const_lv1_1))) then
                add_ln92_1_reg_294 <= add_ln92_1_fu_199_p2;
                and_ln92_1_reg_303 <= and_ln92_1_fu_231_p2;
                and_ln92_reg_299 <= and_ln92_fu_219_p2;
                xor_ln92_2_reg_307 <= xor_ln92_2_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln87_reg_276 = ap_const_lv1_1))) then
                neuron_state_reg_285 <= NEURONS_STATE_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln82_cast_reg_260(7 downto 0) <= zext_ln82_cast_fu_128_p1(7 downto 0);
                    zext_ln87_1_cast_reg_255(13 downto 0) <= zext_ln87_1_cast_fu_124_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln87_1_cast_reg_255(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln82_cast_reg_260(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    NEURONS_MEMBRANE_address0 <= NEURONS_MEMBRANE_addr_reg_271;

    NEURONS_MEMBRANE_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, neuron_state_reg_285, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, and_ln92_reg_299, and_ln92_1_reg_303, xor_ln92_2_reg_307)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv1_0 = and_ln92_reg_299) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (xor_ln92_2_reg_307 = ap_const_lv1_1) and (neuron_state_reg_285 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln92_1_reg_303)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (xor_ln92_2_reg_307 = ap_const_lv1_1) and (neuron_state_reg_285 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln92_reg_299)))) then 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEMBRANE_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln92_1_reg_294, ap_block_pp0_stage0, ap_condition_331, ap_condition_337)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_337)) then 
                NEURONS_MEMBRANE_d0 <= ap_const_lv16_7FFF;
            elsif ((ap_const_boolean_1 = ap_condition_331)) then 
                NEURONS_MEMBRANE_d0 <= ap_const_lv16_8000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                NEURONS_MEMBRANE_d0 <= add_ln92_1_reg_294;
            else 
                NEURONS_MEMBRANE_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            NEURONS_MEMBRANE_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    NEURONS_MEMBRANE_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, icmp_ln87_reg_276, neuron_state_reg_285, and_ln92_reg_299, and_ln92_1_reg_303, xor_ln92_2_reg_307)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (neuron_state_reg_285 = ap_const_lv1_1) and (icmp_ln87_reg_276 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln92_reg_299) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (xor_ln92_2_reg_307 = ap_const_lv1_1) and (neuron_state_reg_285 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln92_1_reg_303)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (xor_ln92_2_reg_307 = ap_const_lv1_1) and (neuron_state_reg_285 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln92_reg_299)))) then 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_1;
        else 
            NEURONS_MEMBRANE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_STATE_address0 <= zext_ln89_fu_158_p1(8 - 1 downto 0);

    NEURONS_STATE_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            NEURONS_STATE_ce0 <= ap_const_logic_1;
        else 
            NEURONS_STATE_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    WEIGHTS_address0 <= weight_index_4_reg_265(14 - 1 downto 0);

    WEIGHTS_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln87_fu_163_p2 <= std_logic_vector(unsigned(weight_index_4_reg_265) + unsigned(ap_const_lv64_1));
    add_ln92_1_fu_199_p0 <= NEURONS_MEMBRANE_q0;
    add_ln92_1_fu_199_p2 <= std_logic_vector(signed(add_ln92_1_fu_199_p0) + signed(sext_ln92_2_fu_181_p1));
    add_ln92_fu_185_p2 <= std_logic_vector(signed(sext_ln92_fu_173_p1) + signed(sext_ln92_1_fu_177_p1));
    and_ln92_1_fu_231_p2 <= (xor_ln92_1_fu_225_p2 and tmp_fu_191_p3);
    and_ln92_fu_219_p2 <= (xor_ln92_fu_213_p2 and tmp_25_fu_205_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_331_assign_proc : process(ap_CS_fsm_pp0_stage1, neuron_state_reg_285, and_ln92_reg_299, and_ln92_1_reg_303, xor_ln92_2_reg_307, ap_block_pp0_stage1)
    begin
                ap_condition_331 <= ((ap_const_lv1_0 = and_ln92_reg_299) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (xor_ln92_2_reg_307 = ap_const_lv1_1) and (neuron_state_reg_285 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln92_1_reg_303));
    end process;


    ap_condition_337_assign_proc : process(ap_CS_fsm_pp0_stage1, neuron_state_reg_285, and_ln92_reg_299, xor_ln92_2_reg_307, ap_block_pp0_stage1)
    begin
                ap_condition_337 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (xor_ln92_2_reg_307 = ap_const_lv1_1) and (neuron_state_reg_285 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln92_reg_299));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln87_fu_144_p2)
    begin
        if (((icmp_ln87_fu_144_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln87_fu_144_p2 <= "1" when (unsigned(weight_index_fu_56) < unsigned(zext_ln87_1_cast_reg_255)) else "0";
    sext_ln92_1_fu_177_p0 <= WEIGHTS_q0;
        sext_ln92_1_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln92_1_fu_177_p0),17));

    sext_ln92_2_fu_181_p0 <= WEIGHTS_q0;
        sext_ln92_2_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln92_2_fu_181_p0),16));

    sext_ln92_fu_173_p0 <= NEURONS_MEMBRANE_q0;
        sext_ln92_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln92_fu_173_p0),17));

    sub_ln89_fu_153_p2 <= std_logic_vector(unsigned(trunc_ln89_fu_149_p1) - unsigned(trunc_ln));
    tmp_25_fu_205_p3 <= add_ln92_1_fu_199_p2(15 downto 15);
    tmp_fu_191_p3 <= add_ln92_fu_185_p2(16 downto 16);
    trunc_ln89_fu_149_p1 <= weight_index_fu_56(8 - 1 downto 0);
    xor_ln92_1_fu_225_p2 <= (tmp_25_fu_205_p3 xor ap_const_lv1_1);
    xor_ln92_2_fu_237_p2 <= (tmp_fu_191_p3 xor tmp_25_fu_205_p3);
    xor_ln92_fu_213_p2 <= (tmp_fu_191_p3 xor ap_const_lv1_1);
    zext_ln82_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln82),64));
    zext_ln87_1_cast_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln87_1),64));
    zext_ln87_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln87),64));
    zext_ln89_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln89_fu_153_p2),64));
end behav;
