-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_TVALID : IN STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    input_stream_TREADY : OUT STD_LOGIC;
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_stream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_stream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of RNI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RNI_RNI,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4,HLS_SYN_LUT=44,HLS_VERSION=2023_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal regslice_both_output_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal input_buffer_last_fu_129_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal input_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal output_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal regslice_both_input_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal input_stream_TVALID_int_regslice : STD_LOGIC;
    signal input_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_input_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_input_stream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_input_stream_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_dest_V_U_ack_in : STD_LOGIC;
    signal output_stream_TVALID_int_regslice : STD_LOGIC;
    signal output_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component RNI_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component RNI_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);

    regslice_both_input_stream_V_data_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TDATA,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_data_V_U_ack_in,
        data_out => input_stream_TDATA_int_regslice,
        vld_out => input_stream_TVALID_int_regslice,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_data_V_U_apdone_blk);

    regslice_both_input_stream_V_keep_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TKEEP,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_keep_V_U_ack_in,
        data_out => input_stream_TKEEP_int_regslice,
        vld_out => regslice_both_input_stream_V_keep_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_keep_V_U_apdone_blk);

    regslice_both_input_stream_V_strb_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TSTRB,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_strb_V_U_ack_in,
        data_out => input_stream_TSTRB_int_regslice,
        vld_out => regslice_both_input_stream_V_strb_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_strb_V_U_apdone_blk);

    regslice_both_input_stream_V_user_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TUSER,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_user_V_U_ack_in,
        data_out => input_stream_TUSER_int_regslice,
        vld_out => regslice_both_input_stream_V_user_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_user_V_U_apdone_blk);

    regslice_both_input_stream_V_last_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TLAST,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_last_V_U_ack_in,
        data_out => input_stream_TLAST_int_regslice,
        vld_out => regslice_both_input_stream_V_last_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_last_V_U_apdone_blk);

    regslice_both_input_stream_V_id_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TID,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_id_V_U_ack_in,
        data_out => input_stream_TID_int_regslice,
        vld_out => regslice_both_input_stream_V_id_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_id_V_U_apdone_blk);

    regslice_both_input_stream_V_dest_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TDEST,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_dest_V_U_ack_in,
        data_out => input_stream_TDEST_int_regslice,
        vld_out => regslice_both_input_stream_V_dest_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_dest_V_U_apdone_blk);

    regslice_both_output_stream_V_data_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TDATA_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => output_stream_TREADY_int_regslice,
        data_out => output_stream_TDATA,
        vld_out => regslice_both_output_stream_V_data_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_data_V_U_apdone_blk);

    regslice_both_output_stream_V_keep_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TKEEP_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_keep_V_U_ack_in_dummy,
        data_out => output_stream_TKEEP,
        vld_out => regslice_both_output_stream_V_keep_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_keep_V_U_apdone_blk);

    regslice_both_output_stream_V_strb_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TSTRB_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_strb_V_U_ack_in_dummy,
        data_out => output_stream_TSTRB,
        vld_out => regslice_both_output_stream_V_strb_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_strb_V_U_apdone_blk);

    regslice_both_output_stream_V_user_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TUSER_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_user_V_U_ack_in_dummy,
        data_out => output_stream_TUSER,
        vld_out => regslice_both_output_stream_V_user_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_user_V_U_apdone_blk);

    regslice_both_output_stream_V_last_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TLAST_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_last_V_U_ack_in_dummy,
        data_out => output_stream_TLAST,
        vld_out => regslice_both_output_stream_V_last_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_last_V_U_apdone_blk);

    regslice_both_output_stream_V_id_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TID_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_id_V_U_ack_in_dummy,
        data_out => output_stream_TID,
        vld_out => regslice_both_output_stream_V_id_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_id_V_U_apdone_blk);

    regslice_both_output_stream_V_dest_V_U : component RNI_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_stream_TDEST_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_dest_V_U_ack_in_dummy,
        data_out => output_stream_TDEST,
        vld_out => regslice_both_output_stream_V_dest_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready = ap_const_logic_0))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, regslice_both_output_stream_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter1_reg, ap_start_int, input_stream_TVALID_int_regslice, output_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_stream_TREADY_int_regslice = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((output_stream_TREADY_int_regslice = ap_const_logic_0) or (input_stream_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, regslice_both_output_stream_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter1_reg, ap_start_int, input_stream_TVALID_int_regslice, output_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_stream_TREADY_int_regslice = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((output_stream_TREADY_int_regslice = ap_const_logic_0) or (input_stream_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, regslice_both_output_stream_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter1_reg, ap_start_int, input_stream_TVALID_int_regslice, output_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_stream_TREADY_int_regslice = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((output_stream_TREADY_int_regslice = ap_const_logic_0) or (input_stream_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_stream_TVALID_int_regslice, output_stream_TREADY_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((output_stream_TREADY_int_regslice = ap_const_logic_0) or (input_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(regslice_both_output_stream_V_data_V_U_apdone_blk, output_stream_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, input_buffer_last_fu_129_p1, ap_start_int)
    begin
        if (((input_buffer_last_fu_129_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_exit_ready_pp0_iter1_reg, ap_block_pp0_stage0_subdone, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    input_buffer_last_fu_129_p1 <= input_stream_TLAST_int_regslice;

    input_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_start_int, input_stream_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_TDATA_blk_n <= input_stream_TVALID_int_regslice;
        else 
            input_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_stream_TREADY <= regslice_both_input_stream_V_data_V_U_ack_in;

    input_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_start_int, output_stream_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_stream_TDATA_blk_n <= output_stream_TREADY_int_regslice;
        else 
            output_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_TVALID <= regslice_both_output_stream_V_data_V_U_vld_out;

    output_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
