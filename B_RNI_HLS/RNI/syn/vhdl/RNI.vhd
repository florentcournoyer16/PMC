-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of RNI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RNI_RNI,hls_ip_2023_1_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2301,HLS_SYN_LUT=2435,HLS_VERSION=2023_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv35_7FFFFFFF0 : STD_LOGIC_VECTOR (34 downto 0) := "11111111111111111111111111111110000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal n_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal NEURONS_MEM_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NEURONS_MEM_ce0 : STD_LOGIC;
    signal NEURONS_MEM_we0 : STD_LOGIC;
    signal NEURONS_MEM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_MEM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NEURONS_ce0 : STD_LOGIC;
    signal NEURONS_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal NEURONS_STATE_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NEURONS_STATE_ce0 : STD_LOGIC;
    signal NEURONS_STATE_we0 : STD_LOGIC;
    signal NEURONS_STATE_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal NEURONS_STATE_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal cmp57_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln26_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_r_read_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_267_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_reg_557 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln24_fu_306_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_570 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_load_1_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_312_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp14_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp14_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp57_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_reg_607 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln26_fu_403_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln26_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_fu_424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln26_reg_626 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_1_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln50_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln26_1_fu_446_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln26_1_reg_641 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln26_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal NEURONS_load_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add10_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add10_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal empty_26_fu_485_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_26_reg_672 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln30_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_MEM_addr_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln30_fu_497_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln30_reg_687 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln26_2_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_done : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_idle : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_ready : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_ce0 : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_we0 : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_ce0 : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_we0 : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal j_1_reg_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state19_io : BOOLEAN;
    signal k_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln64_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln30_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_2_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state24 : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal j_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_130 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal LAYERS_load_phi_cast_cast_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_356_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln26_3_fu_364_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln26_fu_368_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln26_4_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_1_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_383_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal LAYERS_load_phi_fu_316_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln50_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_28_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_load_cast_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_479_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_502_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_RNI_Pipeline_WEIGHTS_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln30 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        j_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        sext_ln30_2 : IN STD_LOGIC_VECTOR (61 downto 0);
        sext_ln30_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        NEURONS_MEM_load : IN STD_LOGIC_VECTOR (31 downto 0);
        cmp14 : IN STD_LOGIC_VECTOR (0 downto 0);
        trunc_ln30_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln26_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        icmp_ln50 : IN STD_LOGIC_VECTOR (0 downto 0);
        add10 : IN STD_LOGIC_VECTOR (31 downto 0);
        NEURONS_MEM_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        NEURONS_MEM_ce0 : OUT STD_LOGIC;
        NEURONS_MEM_we0 : OUT STD_LOGIC;
        NEURONS_MEM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        NEURONS_STATE_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        NEURONS_STATE_ce0 : OUT STD_LOGIC;
        NEURONS_STATE_we0 : OUT STD_LOGIC;
        NEURONS_STATE_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        NEURONS_STATE_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component RNI_NEURONS_MEM_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RNI_NEURONS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component RNI_NEURONS_STATE_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component RNI_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component RNI_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    NEURONS_MEM_U : component RNI_NEURONS_MEM_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => NEURONS_MEM_address0,
        ce0 => NEURONS_MEM_ce0,
        we0 => NEURONS_MEM_we0,
        d0 => NEURONS_MEM_d0,
        q0 => NEURONS_MEM_q0);

    NEURONS_U : component RNI_NEURONS_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => NEURONS_address0,
        ce0 => NEURONS_ce0,
        q0 => NEURONS_q0);

    NEURONS_STATE_U : component RNI_NEURONS_STATE_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => NEURONS_STATE_address0,
        ce0 => NEURONS_STATE_ce0,
        we0 => NEURONS_STATE_we0,
        d0 => NEURONS_STATE_d0,
        q0 => NEURONS_STATE_q0);

    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231 : component RNI_RNI_Pipeline_WEIGHTS_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start,
        ap_done => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_done,
        ap_idle => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_idle,
        ap_ready => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_ready,
        sext_ln30 => k_reg_221,
        m_axi_gmem_AWVALID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        j_1 => trunc_ln26_1_reg_641,
        sext_ln30_2 => trunc_ln_reg_557,
        sext_ln30_1 => add10_reg_665,
        NEURONS_MEM_load => reg_257,
        cmp14 => cmp14_reg_593,
        trunc_ln30_1 => trunc_ln30_reg_687,
        trunc_ln26_1 => trunc_ln26_reg_626,
        icmp_ln50 => icmp_ln50_reg_654,
        add10 => add10_reg_665,
        NEURONS_MEM_address0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_address0,
        NEURONS_MEM_ce0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_ce0,
        NEURONS_MEM_we0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_we0,
        NEURONS_MEM_d0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_d0,
        NEURONS_STATE_address0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_address0,
        NEURONS_STATE_ce0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_ce0,
        NEURONS_STATE_we0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_we0,
        NEURONS_STATE_d0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_d0,
        NEURONS_STATE_q0 => NEURONS_STATE_q0);

    control_s_axi_U : component RNI_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component RNI_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_607,
        I_AWLEN => gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => reg_257,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_ready = ap_const_logic_1)) then 
                    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_130 <= ap_const_lv2_0;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln26_reg_603 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_fu_130 <= add_ln24_reg_570;
            end if; 
        end if;
    end process;

    j_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_1_reg_208 <= sext_ln26_fu_421_p1;
            elsif (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_1_reg_208 <= add_ln26_2_fu_518_p2;
            end if; 
        end if;
    end process;

    j_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_126 <= n_i;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln26_reg_603 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_fu_126 <= add_reg_587;
            end if; 
        end if;
    end process;

    k_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_221 <= w_i;
            elsif (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                k_reg_221 <= add10_reg_665;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                NEURONS_MEM_addr_reg_682 <= j_1_reg_208(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                NEURONS_load_reg_659 <= NEURONS_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add10_reg_665 <= add10_fu_467_p2;
                empty_26_reg_672 <= empty_26_fu_485_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_570 <= add_ln24_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln50_reg_636 <= add_ln50_fu_441_p2;
                sext_ln26_1_reg_631 <= sext_ln26_1_fu_427_p1;
                trunc_ln26_reg_626 <= trunc_ln26_fu_424_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_300_p2 = ap_const_lv1_0))) then
                add_reg_587 <= add_fu_332_p2;
                cmp14_reg_593 <= cmp14_fu_338_p2;
                cmp57_reg_599 <= cmp57_fu_344_p2;
                empty_reg_582 <= empty_fu_312_p1;
                icmp_ln26_reg_603 <= icmp_ln26_fu_350_p2;
                j_load_1_reg_575 <= j_fu_126;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_350_p2 = ap_const_lv1_1) and (icmp_ln24_fu_300_p2 = ap_const_lv1_0))) then
                gmem_addr_1_reg_607 <= sext_ln26_2_fu_393_p1;
                    select_ln26_reg_613(3 downto 1) <= select_ln26_fu_403_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_562 <= sext_ln30_fu_277_p1;
                output_r_read_reg_552 <= output_r;
                trunc_ln_reg_557 <= input_r(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_1_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln50_reg_654 <= icmp_ln50_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_300_p2 = ap_const_lv1_1))) then
                n_i <= j_fu_126;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_257 <= NEURONS_MEM_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln26_1_reg_641 <= trunc_ln26_1_fu_446_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln30_reg_687 <= trunc_ln30_fu_497_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                w_i <= k_reg_221;
            end if;
        end if;
    end process;
    select_ln26_reg_613(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state24, icmp_ln26_reg_603, ap_CS_fsm_state2, icmp_ln24_fu_300_p2, icmp_ln26_fu_350_p2, ap_CS_fsm_state4, icmp_ln26_1_fu_450_p2, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_done, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_block_state19_io, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_350_p2 = ap_const_lv1_0) and (icmp_ln24_fu_300_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln26_1_fu_450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln26_reg_603 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LAYERS_load_phi_cast_cast_fu_324_p3 <= 
        ap_const_lv32_A when (empty_fu_312_p1(0) = '1') else 
        ap_const_lv32_4;
    LAYERS_load_phi_fu_316_p3 <= 
        ap_const_lv4_A when (empty_fu_312_p1(0) = '1') else 
        ap_const_lv4_4;

    NEURONS_MEM_address0_assign_proc : process(ap_CS_fsm_state19, NEURONS_MEM_addr_reg_682, ap_CS_fsm_state13, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_address0, j_1_reg_208, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            NEURONS_MEM_address0 <= NEURONS_MEM_addr_reg_682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            NEURONS_MEM_address0 <= j_1_reg_208(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_MEM_address0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_address0;
        else 
            NEURONS_MEM_address0 <= "XXXX";
        end if; 
    end process;


    NEURONS_MEM_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state13, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_ce0, ap_block_state19_io, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            NEURONS_MEM_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_MEM_ce0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_ce0;
        else 
            NEURONS_MEM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEM_d0_assign_proc : process(ap_CS_fsm_state19, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_d0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NEURONS_MEM_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_MEM_d0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_d0;
        else 
            NEURONS_MEM_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    NEURONS_MEM_we0_assign_proc : process(ap_CS_fsm_state19, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_we0, ap_block_state19_io, ap_CS_fsm_state16, icmp_ln64_fu_512_p2)
    begin
        if (((icmp_ln64_fu_512_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            NEURONS_MEM_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_MEM_we0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_MEM_we0;
        else 
            NEURONS_MEM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_STATE_address0_assign_proc : process(ap_CS_fsm_state19, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_address0, j_1_reg_208, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NEURONS_STATE_address0 <= j_1_reg_208(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_STATE_address0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_address0;
        else 
            NEURONS_STATE_address0 <= "XXXX";
        end if; 
    end process;


    NEURONS_STATE_ce0_assign_proc : process(ap_CS_fsm_state19, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_ce0, ap_block_state19_io, ap_CS_fsm_state16)
    begin
        if (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            NEURONS_STATE_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_STATE_ce0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_ce0;
        else 
            NEURONS_STATE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_STATE_d0_assign_proc : process(ap_CS_fsm_state19, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_d0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NEURONS_STATE_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_STATE_d0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_d0;
        else 
            NEURONS_STATE_d0 <= "X";
        end if; 
    end process;


    NEURONS_STATE_we0_assign_proc : process(ap_CS_fsm_state19, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_we0, ap_block_state19_io, ap_CS_fsm_state16, icmp_ln64_fu_512_p2)
    begin
        if (((icmp_ln64_fu_512_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            NEURONS_STATE_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_STATE_we0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_NEURONS_STATE_we0;
        else 
            NEURONS_STATE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_address0 <= j_1_reg_208(4 - 1 downto 0);

    NEURONS_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            NEURONS_ce0 <= ap_const_logic_1;
        else 
            NEURONS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_load_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(NEURONS_load_reg_659),32));
    add10_fu_467_p2 <= std_logic_vector(unsigned(NEURONS_load_cast_fu_464_p1) + unsigned(k_reg_221));
    add_fu_332_p1 <= j_fu_126;
    add_fu_332_p2 <= std_logic_vector(unsigned(LAYERS_load_phi_cast_cast_fu_324_p3) + unsigned(add_fu_332_p1));
    add_ln24_fu_306_p2 <= std_logic_vector(unsigned(i_fu_130) + unsigned(ap_const_lv2_1));
    add_ln26_1_fu_378_p2 <= std_logic_vector(signed(sext_ln26_4_fu_374_p1) + signed(output_r_read_reg_552));
    add_ln26_2_fu_518_p2 <= std_logic_vector(unsigned(j_1_reg_208) + unsigned(ap_const_lv64_1));
    add_ln26_fu_368_p2 <= std_logic_vector(signed(sext_ln26_3_fu_364_p1) + signed(ap_const_lv35_7FFFFFFF0));
    add_ln50_fu_441_p2 <= std_logic_vector(unsigned(select_ln50_fu_434_p3) + unsigned(j_load_1_reg_575));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_done)
    begin
        if ((grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(ap_block_state19_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state19_io)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(icmp_ln26_reg_603, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) and (icmp_ln26_reg_603 = ap_const_lv1_1))) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state19_io_assign_proc : process(cmp57_reg_599, gmem_WREADY)
    begin
                ap_block_state19_io <= ((gmem_WREADY = ap_const_logic_0) and (cmp57_reg_599 = ap_const_lv1_1));
    end process;


    ap_block_state24_assign_proc : process(icmp_ln26_reg_603, gmem_BVALID)
    begin
                ap_block_state24 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln26_reg_603 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_300_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_300_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp14_fu_338_p2 <= "1" when (i_fu_130 = ap_const_lv2_0) else "0";
    cmp57_fu_344_p2 <= "1" when (i_fu_130 = ap_const_lv2_1) else "0";
    empty_26_fu_485_p3 <= 
        select_ln30_fu_479_p3 when (icmp_ln30_fu_473_p2(0) = '1') else 
        ap_const_lv3_0;
    empty_28_fu_455_p1 <= j_1_reg_208(32 - 1 downto 0);
    empty_fu_312_p1 <= i_fu_130(1 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state7, gmem_addr_reg_562, ap_CS_fsm_state15, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state16)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem_ARADDR <= gmem_addr_reg_562;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_ARADDR <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state7, zext_ln30_fu_493_p1, ap_CS_fsm_state15, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state16)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem_ARLEN <= zext_ln30_fu_493_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_ARLEN <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state15, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state16)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_ARVALID <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_reg_613),32));

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state3, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state24, icmp_ln26_reg_603, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln26_reg_603 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln26_reg_603 = ap_const_lv1_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state15, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_RREADY, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_RREADY <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state19, cmp57_reg_599, ap_block_state19_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state19_io) and (ap_const_logic_1 = ap_CS_fsm_state19) and (cmp57_reg_599 = ap_const_lv1_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state24, icmp_ln26_reg_603)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln26_reg_603 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state19, cmp57_reg_599)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (cmp57_reg_599 = ap_const_lv1_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_231_ap_start_reg;
    icmp_ln24_fu_300_p2 <= "1" when (i_fu_130 = ap_const_lv2_2) else "0";
    icmp_ln26_1_fu_450_p2 <= "1" when (j_1_reg_208 = sext_ln26_1_reg_631) else "0";
    icmp_ln26_fu_350_p0 <= j_fu_126;
    icmp_ln26_fu_350_p2 <= "1" when (signed(icmp_ln26_fu_350_p0) < signed(add_fu_332_p2)) else "0";
    icmp_ln30_fu_473_p2 <= "1" when (signed(k_reg_221) < signed(add10_fu_467_p2)) else "0";
    icmp_ln50_fu_459_p2 <= "1" when (empty_28_fu_455_p1 = add_ln50_reg_636) else "0";
    icmp_ln64_fu_512_p2 <= "1" when (signed(tmp_fu_502_p4) > signed(ap_const_lv25_0)) else "0";
    select_ln26_fu_403_p3 <= 
        LAYERS_load_phi_fu_316_p3 when (cmp57_fu_344_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln30_fu_479_p3 <= 
        NEURONS_load_reg_659 when (cmp14_reg_593(0) = '1') else 
        ap_const_lv3_0;
    select_ln50_fu_434_p3 <= 
        ap_const_lv32_9 when (empty_reg_582(0) = '1') else 
        ap_const_lv32_3;
        sext_ln26_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_reg_587),64));

        sext_ln26_2_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_383_p4),64));

        sext_ln26_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_356_p3),35));

        sext_ln26_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_fu_368_p2),64));

        sext_ln26_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_load_1_reg_575),64));

        sext_ln30_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_267_p4),64));

    shl_ln_fu_356_p1 <= j_fu_126;
    shl_ln_fu_356_p3 <= (shl_ln_fu_356_p1 & ap_const_lv2_0);
    tmp_fu_502_p4 <= reg_257(31 downto 7);
    trunc_ln1_fu_383_p4 <= add_ln26_1_fu_378_p2(63 downto 2);
    trunc_ln26_1_fu_446_p1 <= j_1_reg_208(4 - 1 downto 0);
    trunc_ln26_fu_424_p1 <= j_load_1_reg_575(4 - 1 downto 0);
    trunc_ln30_fu_497_p1 <= k_reg_221(4 - 1 downto 0);
    trunc_ln_fu_267_p4 <= input_r(63 downto 2);
    zext_ln30_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_26_reg_672),32));
end behav;
