-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity RNI_inner_layer_Pipeline_WEIGHTS_LOOP_WEIGHTS_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of RNI_inner_layer_Pipeline_WEIGHTS_LOOP_WEIGHTS_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11111111", 1 => "11111100", 2 => "11111110", 3 => "11111110", 
    4 => "11111111", 5 => "11111010", 6 => "00000001", 7 => "11111011", 
    8 => "11111110", 9 => "11111100", 10 => "11111111", 11 => "11111111", 
    12 => "11111011", 13 => "11111101", 14 => "00000000", 15 => "11111101", 
    16 => "11110101", 17 => "11110100", 18 => "11101110", 19 => "11101101", 
    20 => "11111110", 21 => "11111111", 22 => "00000011", 23 => "00000000", 
    24 => "11111010", 25 => "11111001", 26 => "11111001", 27 => "11111001", 
    28 => "00000010", 29 => "00000011", 30 => "00000100", 31 => "00000010", 
    32 => "11111101", 33 => "11111011", 34 => "00000001", 35 => "11111111", 
    36 => "11111111", 37 => "11111011", 38 => "11111101", 39 => "11111111", 
    40 => "00000000", 41 => "00000100", 42 => "00000001", 43 => "00000101", 
    44 => "00000100", 45 => "00000011", 46 => "00000110", 47 => "00000100", 
    48 => "00001000", 49 => "00001001", 50 => "00000100", 51 => "00001000", 
    52 => "00000100", 53 => "00000101", 54 => "00000001", 55 => "00000001", 
    56 => "00000100", 57 => "00000111", 58 => "00000111", 59 => "00000110", 
    60 => "00000100", 61 => "00000011", 62 => "00000110", 63 => "00000100", 
    64 => "00001011", 65 => "00101010", 66 => "00001110", 67 => "00010101", 
    68 => "01001100", 69 => "11110010", 70 => "11111111", 71 => "00010001", 
    72 => "00001001", 73 => "00010011", 74 => "00101101", 75 => "00000101", 
    76 => "00101010", 77 => "00010000", 78 => "11110100", 79 => "00011011", 
    80 => "11111110", 81 => "11111100", 82 => "11111101", 83 => "11111101", 
    84 => "11110011", 85 => "00000111", 86 => "00010000", 87 => "00001001", 
    88 => "11111011", 89 => "11111101", 90 => "00000010", 91 => "00001100", 
    92 => "00001101", 93 => "00000010", 94 => "00001001", 95 => "00001101", 
    96 => "00000001", 97 => "00000111", 98 => "00000010", 99 => "00000001", 
    100 => "00000100", 101 => "11110000", 102 => "00010000", 103 => "11110111", 
    104 => "00000110", 105 => "00000010", 106 => "11111101", 107 => "11110100", 
    108 => "00000000", 109 => "11111101", 110 => "11111011", 111 => "11110101", 
    112 => "00000101", 113 => "00000111", 114 => "00000111", 115 => "00000110", 
    116 => "00001111", 117 => "00101101", 118 => "00001000", 119 => "00000000", 
    120 => "00000111", 121 => "00000110", 122 => "11111101", 123 => "00000010", 
    124 => "11110001", 125 => "11111100", 126 => "11110100", 127 => "00001111", 
    128 => "00001000", 129 => "11010011", 130 => "01001100", 131 => "11110000", 
    132 => "11111000", 133 => "11111110", 134 => "00000001", 135 => "11111001", 
    136 => "01000000", 137 => "00010101", 138 => "11111100", 139 => "10011010", 
    140 => "00111101", 141 => "11010100", 142 => "11010000", 143 => "01000111", 
    144 => "00101100", 145 => "11010011", 146 => "01010010", 147 => "00000011", 
    148 => "11001011", 149 => "00000001", 150 => "00010110", 151 => "11111100", 
    152 => "00010000", 153 => "00101011", 154 => "00011001", 155 => "11001101", 
    156 => "11010000", 157 => "00001011", 158 => "00001000", 159 => "00010110", 
    160 => "01000001", 161 => "10110110", 162 => "00001010", 163 => "00010000", 
    164 => "00000110", 165 => "00011100", 166 => "00011111", 167 => "10100001", 
    168 => "10101000", 169 => "00000001", 170 => "00011111", 171 => "00000100", 
    172 => "01010001", 173 => "00111111", 174 => "10100110", 175 => "11001000", 
    176 => "00001011", 177 => "10001101", 178 => "11010111", 179 => "01010100", 
    180 => "11100100", 181 => "11000111", 182 => "01110111", 183 => "10110110", 
    184 => "00000000", 185 => "11110101", 186 => "11111000", 187 => "00001010", 
    188 => "00001010", 189 => "11101110", 190 => "00010011", 191 => "00011000", 
    192 => "11111001", 193 => "00000000", 194 => "00011001", 195 => "11111011", 
    196 => "11100100", 197 => "00000001", 198 => "00000000", 199 => "00000000", 
    200 => "11110010", 201 => "00000010", 202 => "00000001", 203 => "00100011", 
    204 => "11111010", 205 => "11101110", 206 => "00000000", 207 => "00000000", 
    208 => "11111000", 209 => "00000000", 210 => "00100011", 211 => "11111001", 
    212 => "11011100", 213 => "00000001", 214 => "00000011", 215 => "11111111", 
    216 => "11101110", 217 => "00000111", 218 => "00000000", 219 => "00101110", 
    220 => "11111010", 221 => "11100011", 222 => "00000000", 223 => "00000000", 
    224 => "11110101", 225 => "00000000", 226 => "00010111", 227 => "11111101", 
    228 => "11011110", 229 => "00000001", 230 => "00000000", 231 => "00000001", 
    232 => "11110001", 233 => "00000001", 234 => "00000010", 235 => "00100000", 
    236 => "11111000", 237 => "11110000", 238 => "11111110", 239 => "00000001", 
    240 => "11110100", 241 => "00000000", 242 => "00100001", 243 => "11111010", 
    244 => "11010101", 245 => "00000001", 246 => "00000001", 247 => "00000000", 
    248 => "11101110", 249 => "00000100", 250 => "00000001", 251 => "00101000", 
    252 => "11111000", 253 => "11101000", 254 => "00000000", 255 => "00000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

