-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RNI is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of RNI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RNI_RNI,hls_ip_2023_1_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2237,HLS_SYN_LUT=2283,HLS_VERSION=2023_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal n_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal NEURONS_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NEURONS_ce0 : STD_LOGIC;
    signal NEURONS_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal NEURONS_MEM_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NEURONS_MEM_ce0 : STD_LOGIC;
    signal NEURONS_MEM_we0 : STD_LOGIC;
    signal NEURONS_MEM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_MEM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_STATE_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NEURONS_STATE_ce0 : STD_LOGIC;
    signal NEURONS_STATE_we0 : STD_LOGIC;
    signal NEURONS_STATE_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal output_r_read_reg_457 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_244_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_reg_462 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_reg_467 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_283_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln19_reg_475 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln19_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp12_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp12_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln21_fu_327_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln21_reg_503 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln21_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln21_1_reg_508 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_reg_513 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln21_1_fu_344_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln21_1_reg_519 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln21_1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NEURONS_load_reg_532 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add8_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add8_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_23_fu_388_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_23_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln23_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_400_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln23_reg_554 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal NEURONS_MEM_addr_reg_559 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln21_fu_421_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_done : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_idle : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_ready : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_ce0 : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_we0 : STD_LOGIC;
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_ce0 : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_done : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_idle : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_ready : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_ce0 : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal j_2_reg_185 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln49_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_114 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_289_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal LAYERS_load_phi_cast_cast_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln21_fu_323_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_fu_327_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal NEURONS_load_cast_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_382_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_405_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RNI_RNI_Pipeline_WEIGHTS_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln23 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        j_2 : IN STD_LOGIC_VECTOR (3 downto 0);
        sext_ln23_2 : IN STD_LOGIC_VECTOR (61 downto 0);
        sext_ln23_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        cmp12 : IN STD_LOGIC_VECTOR (0 downto 0);
        trunc_ln23_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln2 : IN STD_LOGIC_VECTOR (3 downto 0);
        NEURONS_MEM_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        NEURONS_MEM_ce0 : OUT STD_LOGIC;
        NEURONS_MEM_we0 : OUT STD_LOGIC;
        NEURONS_MEM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        NEURONS_MEM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        NEURONS_STATE_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        NEURONS_STATE_ce0 : OUT STD_LOGIC;
        NEURONS_STATE_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component RNI_RNI_Pipeline_VITIS_LOOP_68_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln68 : IN STD_LOGIC_VECTOR (61 downto 0);
        NEURONS_MEM_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        NEURONS_MEM_ce0 : OUT STD_LOGIC;
        NEURONS_MEM_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RNI_NEURONS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component RNI_NEURONS_MEM_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RNI_NEURONS_STATE_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component RNI_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component RNI_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    NEURONS_U : component RNI_NEURONS_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => NEURONS_address0,
        ce0 => NEURONS_ce0,
        q0 => NEURONS_q0);

    NEURONS_MEM_U : component RNI_NEURONS_MEM_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => NEURONS_MEM_address0,
        ce0 => NEURONS_MEM_ce0,
        we0 => NEURONS_MEM_we0,
        d0 => NEURONS_MEM_d0,
        q0 => NEURONS_MEM_q0);

    NEURONS_STATE_U : component RNI_NEURONS_STATE_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => NEURONS_STATE_address0,
        ce0 => NEURONS_STATE_ce0,
        we0 => NEURONS_STATE_we0,
        d0 => ap_const_lv1_1,
        q0 => NEURONS_STATE_q0);

    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208 : component RNI_RNI_Pipeline_WEIGHTS_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start,
        ap_done => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_done,
        ap_idle => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_idle,
        ap_ready => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_ready,
        sext_ln23 => k_reg_198,
        m_axi_gmem_AWVALID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        j_2 => trunc_ln21_1_reg_519,
        sext_ln23_2 => trunc_ln_reg_462,
        sext_ln23_1 => add8_reg_538,
        cmp12 => cmp12_reg_485,
        trunc_ln23_1 => trunc_ln23_reg_554,
        trunc_ln2 => trunc_ln21_reg_503,
        NEURONS_MEM_address0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_address0,
        NEURONS_MEM_ce0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_ce0,
        NEURONS_MEM_we0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_we0,
        NEURONS_MEM_d0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_d0,
        NEURONS_MEM_q0 => NEURONS_MEM_q0,
        NEURONS_STATE_address0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_address0,
        NEURONS_STATE_ce0 => grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_ce0,
        NEURONS_STATE_q0 => NEURONS_STATE_q0);

    grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228 : component RNI_RNI_Pipeline_VITIS_LOOP_68_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start,
        ap_done => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_done,
        ap_idle => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_idle,
        ap_ready => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_ready,
        m_axi_gmem_AWVALID => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln68 => trunc_ln1_reg_513,
        NEURONS_MEM_address0 => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_address0,
        NEURONS_MEM_ce0 => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_ce0,
        NEURONS_MEM_q0 => NEURONS_MEM_q0);

    control_s_axi_U : component RNI_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component RNI_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWLEN => gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WDATA,
        I_WSTRB => grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_114 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln21_1_fu_348_p2 = ap_const_lv1_1) or (icmp_ln21_reg_491 = ap_const_lv1_0)))) then 
                i_fu_114 <= add_ln19_reg_475;
            end if; 
        end if;
    end process;

    j_2_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln21_fu_313_p2 = ap_const_lv1_1) and (icmp_ln19_fu_277_p2 = ap_const_lv1_0))) then 
                j_2_reg_185 <= sext_ln21_fu_323_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_2_reg_185 <= add_ln21_fu_421_p2;
            end if; 
        end if;
    end process;

    j_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_110 <= n_i;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln21_1_fu_348_p2 = ap_const_lv1_1) or (icmp_ln21_reg_491 = ap_const_lv1_0)))) then 
                j_fu_110 <= add_reg_480;
            end if; 
        end if;
    end process;

    k_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln21_fu_313_p2 = ap_const_lv1_1) and (icmp_ln19_fu_277_p2 = ap_const_lv1_0))) then 
                k_reg_198 <= w_i;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k_reg_198 <= add8_reg_538;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                NEURONS_MEM_addr_reg_559 <= j_2_reg_185(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                NEURONS_load_reg_532 <= NEURONS_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add8_reg_538 <= add8_fu_370_p2;
                empty_23_reg_544 <= empty_23_fu_388_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_reg_475 <= add_ln19_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_277_p2 = ap_const_lv1_0))) then
                add_reg_480 <= add_fu_301_p2;
                cmp12_reg_485 <= cmp12_fu_307_p2;
                icmp_ln21_reg_491 <= icmp_ln21_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_467 <= sext_ln23_fu_254_p1;
                output_r_read_reg_457 <= output_r;
                trunc_ln_reg_462 <= input_r(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                n_i <= j_fu_110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln21_fu_313_p2 = ap_const_lv1_1) and (icmp_ln19_fu_277_p2 = ap_const_lv1_0))) then
                sext_ln21_1_reg_508 <= sext_ln21_1_fu_331_p1;
                trunc_ln21_reg_503 <= trunc_ln21_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_277_p2 = ap_const_lv1_1))) then
                trunc_ln1_reg_513 <= output_r_read_reg_457(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln21_reg_491 = ap_const_lv1_1))) then
                trunc_ln21_1_reg_519 <= trunc_ln21_1_fu_344_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln23_reg_554 <= trunc_ln23_fu_400_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln21_1_fu_348_p2 = ap_const_lv1_1) and (icmp_ln21_reg_491 = ap_const_lv1_1))) then
                w_i <= k_reg_198;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state2, icmp_ln19_fu_277_p2, icmp_ln21_reg_491, ap_CS_fsm_state3, icmp_ln21_1_fu_348_p2, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_done, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_done, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_277_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln21_1_fu_348_p2 = ap_const_lv1_1) or (icmp_ln21_reg_491 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state18 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LAYERS_load_phi_cast_cast_fu_293_p3 <= 
        ap_const_lv32_A when (empty_fu_289_p1(0) = '1') else 
        ap_const_lv32_4;

    NEURONS_MEM_address0_assign_proc : process(NEURONS_MEM_addr_reg_559, ap_CS_fsm_state16, ap_CS_fsm_state17, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_address0, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_address0, j_2_reg_185, ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            NEURONS_MEM_address0 <= NEURONS_MEM_addr_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NEURONS_MEM_address0 <= j_2_reg_185(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            NEURONS_MEM_address0 <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NEURONS_MEM_address0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_address0;
        else 
            NEURONS_MEM_address0 <= "XXXX";
        end if; 
    end process;


    NEURONS_MEM_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_ce0, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_ce0, ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            NEURONS_MEM_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            NEURONS_MEM_ce0 <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_NEURONS_MEM_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NEURONS_MEM_ce0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_ce0;
        else 
            NEURONS_MEM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_MEM_d0_assign_proc : process(ap_CS_fsm_state17, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_d0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            NEURONS_MEM_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NEURONS_MEM_d0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_d0;
        else 
            NEURONS_MEM_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    NEURONS_MEM_we0_assign_proc : process(ap_CS_fsm_state17, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_we0, ap_CS_fsm_state15, icmp_ln49_fu_415_p2)
    begin
        if (((icmp_ln49_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            NEURONS_MEM_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NEURONS_MEM_we0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_MEM_we0;
        else 
            NEURONS_MEM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_STATE_address0_assign_proc : process(ap_CS_fsm_state17, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_address0, j_2_reg_185, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            NEURONS_STATE_address0 <= j_2_reg_185(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NEURONS_STATE_address0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_address0;
        else 
            NEURONS_STATE_address0 <= "XXXX";
        end if; 
    end process;


    NEURONS_STATE_ce0_assign_proc : process(ap_CS_fsm_state17, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            NEURONS_STATE_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NEURONS_STATE_ce0 <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_NEURONS_STATE_ce0;
        else 
            NEURONS_STATE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NEURONS_STATE_we0_assign_proc : process(ap_CS_fsm_state17, icmp_ln49_fu_415_p2)
    begin
        if (((icmp_ln49_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            NEURONS_STATE_we0 <= ap_const_logic_1;
        else 
            NEURONS_STATE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_address0 <= j_2_reg_185(4 - 1 downto 0);

    NEURONS_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            NEURONS_ce0 <= ap_const_logic_1;
        else 
            NEURONS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NEURONS_load_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(NEURONS_load_reg_532),32));
    add8_fu_370_p2 <= std_logic_vector(unsigned(NEURONS_load_cast_fu_367_p1) + unsigned(k_reg_198));
    add_fu_301_p1 <= j_fu_110;
    add_fu_301_p2 <= std_logic_vector(unsigned(LAYERS_load_phi_cast_cast_fu_293_p3) + unsigned(add_fu_301_p1));
    add_ln19_fu_283_p2 <= std_logic_vector(unsigned(i_fu_114) + unsigned(ap_const_lv2_1));
    add_ln21_fu_421_p2 <= std_logic_vector(unsigned(j_2_reg_185) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_done)
    begin
        if ((grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_done)
    begin
        if ((grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state25, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp12_fu_307_p2 <= "1" when (i_fu_114 = ap_const_lv2_0) else "0";
    empty_23_fu_388_p3 <= 
        select_ln23_fu_382_p3 when (icmp_ln23_fu_376_p2(0) = '1') else 
        ap_const_lv3_0;
    empty_fu_289_p1 <= i_fu_114(1 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state6, gmem_addr_reg_467, ap_CS_fsm_state14, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state15)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARADDR <= gmem_addr_reg_467;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_ARADDR <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state6, zext_ln23_fu_396_p1, ap_CS_fsm_state14, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state15)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARLEN <= zext_ln23_fu_396_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_ARLEN <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state15)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_ARVALID <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state18, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWADDR, gmem_AWREADY, ap_CS_fsm_state19, ap_CS_fsm_state20, sext_ln68_fu_427_p1)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_AWADDR <= sext_ln68_fu_427_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_AWADDR <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state18, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWLEN, gmem_AWREADY, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_AWLEN <= ap_const_lv32_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_AWLEN <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state18, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWVALID, gmem_AWREADY, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_AWVALID <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state25, grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_BREADY, gmem_BVALID, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_BREADY <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state14, grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_RREADY, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_RREADY <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WVALID, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_WVALID <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start <= grp_RNI_Pipeline_VITIS_LOOP_68_1_fu_228_ap_start_reg;
    grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start <= grp_RNI_Pipeline_WEIGHTS_LOOP_fu_208_ap_start_reg;
    icmp_ln19_fu_277_p2 <= "1" when (i_fu_114 = ap_const_lv2_2) else "0";
    icmp_ln21_1_fu_348_p2 <= "1" when (j_2_reg_185 = sext_ln21_1_reg_508) else "0";
    icmp_ln21_fu_313_p0 <= j_fu_110;
    icmp_ln21_fu_313_p2 <= "1" when (signed(icmp_ln21_fu_313_p0) < signed(add_fu_301_p2)) else "0";
    icmp_ln23_fu_376_p2 <= "1" when (signed(k_reg_198) < signed(add8_fu_370_p2)) else "0";
    icmp_ln49_fu_415_p2 <= "1" when (signed(tmp_fu_405_p4) > signed(ap_const_lv25_0)) else "0";
    select_ln23_fu_382_p3 <= 
        NEURONS_load_reg_532 when (cmp12_reg_485(0) = '1') else 
        ap_const_lv3_0;
        sext_ln21_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_fu_301_p2),64));

    sext_ln21_fu_323_p0 <= j_fu_110;
        sext_ln21_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_fu_323_p0),64));

        sext_ln23_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_244_p4),64));

        sext_ln68_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_513),64));

    tmp_fu_405_p4 <= NEURONS_MEM_q0(31 downto 7);
    trunc_ln21_1_fu_344_p1 <= j_2_reg_185(4 - 1 downto 0);
    trunc_ln21_fu_327_p0 <= j_fu_110;
    trunc_ln21_fu_327_p1 <= trunc_ln21_fu_327_p0(4 - 1 downto 0);
    trunc_ln23_fu_400_p1 <= k_reg_198(4 - 1 downto 0);
    trunc_ln_fu_244_p4 <= input_r(63 downto 2);
    zext_ln23_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_23_reg_544),32));
end behav;
