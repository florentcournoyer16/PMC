-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_convert is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_24_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_24_TVALID : IN STD_LOGIC;
    stream_in_24_TREADY : OUT STD_LOGIC;
    stream_in_24_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_in_24_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_in_24_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_24_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_24_TVALID : OUT STD_LOGIC;
    stream_out_24_TREADY : IN STD_LOGIC;
    stream_out_24_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    stream_out_24_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    stream_out_24_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of color_convert is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_convert_color_convert,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.520000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1662,HLS_SYN_LUT=1917,HLS_VERSION=2023_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal c1_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_in_24_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_24_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal curr_pixel_keep_reg_1206 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal regslice_both_stream_out_24_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal curr_pixel_keep_reg_1206_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_keep_reg_1206_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_keep_reg_1206_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_keep_reg_1206_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_strb_reg_1211 : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_strb_reg_1211_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_strb_reg_1211_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_strb_reg_1211_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_strb_reg_1211_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_pixel_user_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1216_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1216_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1216_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1216_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1221 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1221_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1221_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1221_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1221_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v_p1_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p1_reg_1226 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p2_reg_1231 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p3_reg_1236 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p3_reg_1236_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_c1_read_reg_1241 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_read_reg_1246 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_read_reg_1251 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_read_reg_1251_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1256 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1256_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1256_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln32_5_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_5_reg_1261 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_5_reg_1261_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_5_reg_1261_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_c1_read_reg_1266 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2_read_reg_1271 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_read_reg_1276 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_read_reg_1276_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1281 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1281_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1281_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln33_5_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_5_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_5_reg_1286_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_5_reg_1286_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_c1_read_reg_1291 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2_read_reg_1296 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_read_reg_1301 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_read_reg_1301_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1306 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1306_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1306_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln34_5_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_5_reg_1311 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_5_reg_1311_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_5_reg_1311_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_fu_325_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln32_reg_1316 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln32_fu_331_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln32_1_fu_341_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln32_1_reg_1326 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln32_1_fu_347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_1_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln33_fu_354_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln33_reg_1336 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln33_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln33_1_fu_367_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln33_1_reg_1346 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln33_1_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_1_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_fu_380_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln34_reg_1356 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln34_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_1_fu_393_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln34_1_reg_1366 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln34_1_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_1_reg_1371 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_8_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_8_reg_1376 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_fu_413_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln32_reg_1381 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln32_2_fu_425_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln32_2_reg_1386 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln32_2_fu_431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_2_reg_1391 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_3_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_3_reg_1396 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_4_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_4_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_8_fu_449_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_8_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_fu_453_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln33_reg_1411 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln33_2_fu_462_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln33_2_reg_1416 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln33_2_fu_468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_2_reg_1421 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_3_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_3_reg_1426 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_4_fu_476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_4_reg_1431 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_8_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_8_reg_1436 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_fu_490_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln34_reg_1441 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln34_2_fu_499_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln34_2_reg_1446 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln34_2_fu_505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_2_reg_1451 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_3_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_3_reg_1456 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_4_fu_513_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_4_reg_1461 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1466 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1466_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_1473 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1478 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1484 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_7_reg_1490 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_1495 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_reg_1501 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1501_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_1508 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1519 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln33_7_reg_1525 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1530 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1536_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_reg_1543 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln34_7_reg_1560 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1565 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_3_fu_835_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_3_reg_1571 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_7_fu_840_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_7_reg_1577 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln32_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_reg_1582 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_reg_1588 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_3_fu_906_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_3_reg_1594 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_7_fu_911_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln33_7_reg_1600 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln33_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_reg_1605 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_reg_1611 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_3_fu_977_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_3_reg_1617 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_7_fu_982_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln34_7_reg_1623 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln34_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_1628 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln32_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_fu_319_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln32_1_fu_341_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_1_fu_335_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln33_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_1_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln34_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln34_1_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln32_3_fu_406_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln32_2_fu_403_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln32_2_fu_425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_2_fu_419_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln33_3_fu_446_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln33_2_fu_443_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln33_2_fu_462_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln34_3_fu_483_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln34_2_fu_480_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln34_2_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln32_5_fu_517_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln32_6_fu_520_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln_fu_529_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln32_7_fu_536_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln32_1_fu_523_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln32_6_fu_544_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_4_fu_540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_2_fu_551_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln32_6_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_5_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln33_5_fu_621_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln33_6_fu_624_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1_fu_633_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln33_7_fu_640_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln33_1_fu_627_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln33_6_fu_648_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_4_fu_644_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_2_fu_655_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln33_6_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_5_fu_661_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln34_5_fu_725_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln34_6_fu_728_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln2_fu_737_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln34_7_fu_744_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_1_fu_731_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln34_6_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_4_fu_748_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_2_fu_759_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_6_fu_769_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_5_fu_765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_3_fu_829_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_4_fu_832_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_869_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_3_fu_877_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_2_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_fu_900_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln33_1_fu_903_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_926_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_940_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_3_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_2_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_971_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_1_fu_974_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_997_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_1011_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_3_fu_1019_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_2_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_1_fu_1052_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln32_1_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_2_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_5_fu_1058_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_4_fu_1073_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln32_1_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_2_fu_1079_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_1_fu_1103_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln33_1_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_2_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_2_fu_1109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_4_fu_1124_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln33_1_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_2_fu_1130_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_1_fu_1154_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln34_1_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_2_fu_1160_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_4_fu_1175_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln34_1_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_fu_1181_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out3_fu_1188_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out2_fu_1137_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out1_fu_1086_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_stream_in_24_V_data_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_TVALID_int_regslice : STD_LOGIC;
    signal stream_in_24_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_in_24_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_stream_in_24_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_stream_in_24_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_24_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_24_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_last_V_U_ack_in : STD_LOGIC;
    signal stream_out_24_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_TVALID_int_regslice : STD_LOGIC;
    signal stream_out_24_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_out_24_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component color_convert_mul_10s_8ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component color_convert_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        c1_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c3 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component color_convert_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component color_convert_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        c1_c1 => c1_c1,
        c1_c2 => c1_c2,
        c1_c3 => c1_c3,
        c2_c1 => c2_c1,
        c2_c2 => c2_c2,
        c2_c3 => c2_c3,
        c3_c1 => c3_c1,
        c3_c2 => c3_c2,
        c3_c3 => c3_c3,
        bias_c1 => bias_c1,
        bias_c2 => bias_c2,
        bias_c3 => bias_c3);

    mul_10s_8ns_18_1_1_U1 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c1_c1_read_reg_1241,
        din1 => mul_ln32_fu_325_p1,
        dout => mul_ln32_fu_325_p2);

    mul_10s_8ns_18_1_1_U2 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c1_c2_read_reg_1246,
        din1 => mul_ln32_1_fu_341_p1,
        dout => mul_ln32_1_fu_341_p2);

    mul_10s_8ns_18_1_1_U3 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c2_c1_read_reg_1266,
        din1 => mul_ln33_fu_354_p1,
        dout => mul_ln33_fu_354_p2);

    mul_10s_8ns_18_1_1_U4 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c2_c2_read_reg_1271,
        din1 => mul_ln33_1_fu_367_p1,
        dout => mul_ln33_1_fu_367_p2);

    mul_10s_8ns_18_1_1_U5 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c3_c1_read_reg_1291,
        din1 => mul_ln34_fu_380_p1,
        dout => mul_ln34_fu_380_p2);

    mul_10s_8ns_18_1_1_U6 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c3_c2_read_reg_1296,
        din1 => mul_ln34_1_fu_393_p1,
        dout => mul_ln34_1_fu_393_p2);

    mul_10s_8ns_18_1_1_U7 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c1_c3_read_reg_1251_pp0_iter1_reg,
        din1 => mul_ln32_2_fu_425_p1,
        dout => mul_ln32_2_fu_425_p2);

    mul_10s_8ns_18_1_1_U8 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c2_c3_read_reg_1276_pp0_iter1_reg,
        din1 => mul_ln33_2_fu_462_p1,
        dout => mul_ln33_2_fu_462_p2);

    mul_10s_8ns_18_1_1_U9 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c3_c3_read_reg_1301_pp0_iter1_reg,
        din1 => mul_ln34_2_fu_499_p1,
        dout => mul_ln34_2_fu_499_p2);

    regslice_both_stream_in_24_V_data_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TDATA,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_data_V_U_ack_in,
        data_out => stream_in_24_TDATA_int_regslice,
        vld_out => stream_in_24_TVALID_int_regslice,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_data_V_U_apdone_blk);

    regslice_both_stream_in_24_V_keep_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TKEEP,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_keep_V_U_ack_in,
        data_out => stream_in_24_TKEEP_int_regslice,
        vld_out => regslice_both_stream_in_24_V_keep_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_keep_V_U_apdone_blk);

    regslice_both_stream_in_24_V_strb_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TSTRB,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_strb_V_U_ack_in,
        data_out => stream_in_24_TSTRB_int_regslice,
        vld_out => regslice_both_stream_in_24_V_strb_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_strb_V_U_apdone_blk);

    regslice_both_stream_in_24_V_user_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TUSER,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_user_V_U_ack_in,
        data_out => stream_in_24_TUSER_int_regslice,
        vld_out => regslice_both_stream_in_24_V_user_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_user_V_U_apdone_blk);

    regslice_both_stream_in_24_V_last_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TLAST,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_last_V_U_ack_in,
        data_out => stream_in_24_TLAST_int_regslice,
        vld_out => regslice_both_stream_in_24_V_last_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_last_V_U_apdone_blk);

    regslice_both_stream_out_24_V_data_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_24_TDATA_int_regslice,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => stream_out_24_TREADY_int_regslice,
        data_out => stream_out_24_TDATA,
        vld_out => regslice_both_stream_out_24_V_data_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_data_V_U_apdone_blk);

    regslice_both_stream_out_24_V_keep_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_keep_reg_1206_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy,
        data_out => stream_out_24_TKEEP,
        vld_out => regslice_both_stream_out_24_V_keep_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_keep_V_U_apdone_blk);

    regslice_both_stream_out_24_V_strb_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_strb_reg_1211_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy,
        data_out => stream_out_24_TSTRB,
        vld_out => regslice_both_stream_out_24_V_strb_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_strb_V_U_apdone_blk);

    regslice_both_stream_out_24_V_user_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_user_reg_1216_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_user_V_U_ack_in_dummy,
        data_out => stream_out_24_TUSER,
        vld_out => regslice_both_stream_out_24_V_user_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_user_V_U_apdone_blk);

    regslice_both_stream_out_24_V_last_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_last_reg_1221_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_last_V_U_ack_in_dummy,
        data_out => stream_out_24_TLAST,
        vld_out => regslice_both_stream_out_24_V_last_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln32_3_reg_1571 <= add_ln32_3_fu_835_p2;
                add_ln32_8_reg_1376 <= add_ln32_8_fu_409_p2;
                add_ln32_reg_1381 <= add_ln32_fu_413_p2;
                add_ln33_3_reg_1594 <= add_ln33_3_fu_906_p2;
                add_ln33_8_reg_1406 <= add_ln33_8_fu_449_p2;
                add_ln33_reg_1411 <= add_ln33_fu_453_p2;
                add_ln34_3_reg_1617 <= add_ln34_3_fu_977_p2;
                add_ln34_8_reg_1436 <= add_ln34_8_fu_486_p2;
                add_ln34_reg_1441 <= add_ln34_fu_490_p2;
                and_ln32_1_reg_1588 <= and_ln32_1_fu_895_p2;
                and_ln33_1_reg_1611 <= and_ln33_1_fu_966_p2;
                and_ln34_1_reg_1634 <= and_ln34_1_fu_1037_p2;
                bias_c1_read_reg_1256_pp0_iter2_reg <= bias_c1_read_reg_1256_pp0_iter1_reg;
                bias_c2_read_reg_1281_pp0_iter2_reg <= bias_c2_read_reg_1281_pp0_iter1_reg;
                bias_c3_read_reg_1306_pp0_iter2_reg <= bias_c3_read_reg_1306_pp0_iter1_reg;
                curr_pixel_keep_reg_1206_pp0_iter2_reg <= curr_pixel_keep_reg_1206_pp0_iter1_reg;
                curr_pixel_keep_reg_1206_pp0_iter3_reg <= curr_pixel_keep_reg_1206_pp0_iter2_reg;
                curr_pixel_keep_reg_1206_pp0_iter4_reg <= curr_pixel_keep_reg_1206_pp0_iter3_reg;
                curr_pixel_last_reg_1221_pp0_iter2_reg <= curr_pixel_last_reg_1221_pp0_iter1_reg;
                curr_pixel_last_reg_1221_pp0_iter3_reg <= curr_pixel_last_reg_1221_pp0_iter2_reg;
                curr_pixel_last_reg_1221_pp0_iter4_reg <= curr_pixel_last_reg_1221_pp0_iter3_reg;
                curr_pixel_strb_reg_1211_pp0_iter2_reg <= curr_pixel_strb_reg_1211_pp0_iter1_reg;
                curr_pixel_strb_reg_1211_pp0_iter3_reg <= curr_pixel_strb_reg_1211_pp0_iter2_reg;
                curr_pixel_strb_reg_1211_pp0_iter4_reg <= curr_pixel_strb_reg_1211_pp0_iter3_reg;
                curr_pixel_user_reg_1216_pp0_iter2_reg <= curr_pixel_user_reg_1216_pp0_iter1_reg;
                curr_pixel_user_reg_1216_pp0_iter3_reg <= curr_pixel_user_reg_1216_pp0_iter2_reg;
                curr_pixel_user_reg_1216_pp0_iter4_reg <= curr_pixel_user_reg_1216_pp0_iter3_reg;
                mul_ln32_2_reg_1386 <= mul_ln32_2_fu_425_p2;
                mul_ln33_2_reg_1416 <= mul_ln33_2_fu_462_p2;
                mul_ln34_2_reg_1446 <= mul_ln34_2_fu_499_p2;
                or_ln32_reg_1582 <= or_ln32_fu_884_p2;
                or_ln33_reg_1605 <= or_ln33_fu_955_p2;
                or_ln34_reg_1628 <= or_ln34_fu_1026_p2;
                tmp_11_reg_1536 <= add_ln34_2_fu_759_p2(19 downto 19);
                tmp_11_reg_1536_pp0_iter4_reg <= tmp_11_reg_1536;
                tmp_12_reg_1548 <= add_ln34_6_fu_769_p2(15 downto 15);
                tmp_13_reg_1554 <= add_ln34_5_fu_765_p2(7 downto 7);
                tmp_1_reg_1530 <= add_ln33_2_fu_655_p2(19 downto 16);
                tmp_2_reg_1565 <= add_ln34_2_fu_759_p2(19 downto 16);
                tmp_3_reg_1466 <= add_ln32_2_fu_551_p2(19 downto 19);
                tmp_3_reg_1466_pp0_iter4_reg <= tmp_3_reg_1466;
                tmp_4_reg_1478 <= add_ln32_6_fu_561_p2(15 downto 15);
                tmp_5_reg_1484 <= add_ln32_5_fu_557_p2(7 downto 7);
                tmp_7_reg_1501 <= add_ln33_2_fu_655_p2(19 downto 19);
                tmp_7_reg_1501_pp0_iter4_reg <= tmp_7_reg_1501;
                tmp_8_reg_1513 <= add_ln33_6_fu_665_p2(15 downto 15);
                tmp_9_reg_1519 <= add_ln33_5_fu_661_p2(7 downto 7);
                tmp_reg_1495 <= add_ln32_2_fu_551_p2(19 downto 16);
                trunc_ln1_reg_1508 <= add_ln33_6_fu_665_p2(15 downto 8);
                trunc_ln2_reg_1543 <= add_ln34_6_fu_769_p2(15 downto 8);
                trunc_ln32_2_reg_1391 <= trunc_ln32_2_fu_431_p1;
                trunc_ln32_3_reg_1396 <= trunc_ln32_3_fu_435_p1;
                trunc_ln32_4_reg_1401 <= trunc_ln32_4_fu_439_p1;
                trunc_ln32_5_reg_1261_pp0_iter2_reg <= trunc_ln32_5_reg_1261_pp0_iter1_reg;
                trunc_ln32_7_reg_1490 <= add_ln32_6_fu_561_p2(14 downto 8);
                trunc_ln33_2_reg_1421 <= trunc_ln33_2_fu_468_p1;
                trunc_ln33_3_reg_1426 <= trunc_ln33_3_fu_472_p1;
                trunc_ln33_4_reg_1431 <= trunc_ln33_4_fu_476_p1;
                trunc_ln33_5_reg_1286_pp0_iter2_reg <= trunc_ln33_5_reg_1286_pp0_iter1_reg;
                trunc_ln33_7_reg_1525 <= add_ln33_6_fu_665_p2(14 downto 8);
                trunc_ln34_2_reg_1451 <= trunc_ln34_2_fu_505_p1;
                trunc_ln34_3_reg_1456 <= trunc_ln34_3_fu_509_p1;
                trunc_ln34_4_reg_1461 <= trunc_ln34_4_fu_513_p1;
                trunc_ln34_5_reg_1311_pp0_iter2_reg <= trunc_ln34_5_reg_1311_pp0_iter1_reg;
                trunc_ln34_7_reg_1560 <= add_ln34_6_fu_769_p2(14 downto 8);
                trunc_ln_reg_1473 <= add_ln32_6_fu_561_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_1466 = ap_const_lv1_1))) then
                add_ln32_7_reg_1577 <= add_ln32_7_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_1501 = ap_const_lv1_1))) then
                add_ln33_7_reg_1600 <= add_ln33_7_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_11_reg_1536 = ap_const_lv1_1))) then
                add_ln34_7_reg_1623 <= add_ln34_7_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bias_c1_read_reg_1256 <= bias_c1;
                bias_c1_read_reg_1256_pp0_iter1_reg <= bias_c1_read_reg_1256;
                bias_c2_read_reg_1281 <= bias_c2;
                bias_c2_read_reg_1281_pp0_iter1_reg <= bias_c2_read_reg_1281;
                bias_c3_read_reg_1306 <= bias_c3;
                bias_c3_read_reg_1306_pp0_iter1_reg <= bias_c3_read_reg_1306;
                c1_c1_read_reg_1241 <= c1_c1;
                c1_c2_read_reg_1246 <= c1_c2;
                c1_c3_read_reg_1251 <= c1_c3;
                c1_c3_read_reg_1251_pp0_iter1_reg <= c1_c3_read_reg_1251;
                c2_c1_read_reg_1266 <= c2_c1;
                c2_c2_read_reg_1271 <= c2_c2;
                c2_c3_read_reg_1276 <= c2_c3;
                c2_c3_read_reg_1276_pp0_iter1_reg <= c2_c3_read_reg_1276;
                c3_c1_read_reg_1291 <= c3_c1;
                c3_c2_read_reg_1296 <= c3_c2;
                c3_c3_read_reg_1301 <= c3_c3;
                c3_c3_read_reg_1301_pp0_iter1_reg <= c3_c3_read_reg_1301;
                curr_pixel_keep_reg_1206 <= stream_in_24_TKEEP_int_regslice;
                curr_pixel_keep_reg_1206_pp0_iter1_reg <= curr_pixel_keep_reg_1206;
                curr_pixel_last_reg_1221 <= stream_in_24_TLAST_int_regslice;
                curr_pixel_last_reg_1221_pp0_iter1_reg <= curr_pixel_last_reg_1221;
                curr_pixel_strb_reg_1211 <= stream_in_24_TSTRB_int_regslice;
                curr_pixel_strb_reg_1211_pp0_iter1_reg <= curr_pixel_strb_reg_1211;
                curr_pixel_user_reg_1216 <= stream_in_24_TUSER_int_regslice;
                curr_pixel_user_reg_1216_pp0_iter1_reg <= curr_pixel_user_reg_1216;
                mul_ln32_1_reg_1326 <= mul_ln32_1_fu_341_p2;
                mul_ln32_reg_1316 <= mul_ln32_fu_325_p2;
                mul_ln33_1_reg_1346 <= mul_ln33_1_fu_367_p2;
                mul_ln33_reg_1336 <= mul_ln33_fu_354_p2;
                mul_ln34_1_reg_1366 <= mul_ln34_1_fu_393_p2;
                mul_ln34_reg_1356 <= mul_ln34_fu_380_p2;
                trunc_ln32_1_reg_1331 <= trunc_ln32_1_fu_347_p1;
                trunc_ln32_5_reg_1261 <= trunc_ln32_5_fu_307_p1;
                trunc_ln32_5_reg_1261_pp0_iter1_reg <= trunc_ln32_5_reg_1261;
                trunc_ln32_reg_1321 <= trunc_ln32_fu_331_p1;
                trunc_ln33_1_reg_1351 <= trunc_ln33_1_fu_373_p1;
                trunc_ln33_5_reg_1286 <= trunc_ln33_5_fu_311_p1;
                trunc_ln33_5_reg_1286_pp0_iter1_reg <= trunc_ln33_5_reg_1286;
                trunc_ln33_reg_1341 <= trunc_ln33_fu_360_p1;
                trunc_ln34_1_reg_1371 <= trunc_ln34_1_fu_399_p1;
                trunc_ln34_5_reg_1311 <= trunc_ln34_5_fu_315_p1;
                trunc_ln34_5_reg_1311_pp0_iter1_reg <= trunc_ln34_5_reg_1311;
                trunc_ln34_reg_1361 <= trunc_ln34_fu_386_p1;
                v_p1_reg_1226 <= v_p1_fu_283_p1;
                v_p2_reg_1231 <= stream_in_24_TDATA_int_regslice(15 downto 8);
                v_p3_reg_1236 <= stream_in_24_TDATA_int_regslice(23 downto 16);
                v_p3_reg_1236_pp0_iter1_reg <= v_p3_reg_1236;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln32_1_fu_523_p2 <= std_logic_vector(signed(sext_ln32_5_fu_517_p1) + signed(sext_ln32_6_fu_520_p1));
    add_ln32_2_fu_551_p2 <= std_logic_vector(signed(sext_ln32_7_fu_536_p1) + signed(add_ln32_1_fu_523_p2));
    add_ln32_3_fu_835_p2 <= std_logic_vector(unsigned(zext_ln32_3_fu_829_p1) + unsigned(trunc_ln_reg_1473));
    add_ln32_4_fu_540_p2 <= std_logic_vector(unsigned(add_ln32_8_reg_1376) + unsigned(trunc_ln32_4_reg_1401));
    add_ln32_5_fu_557_p2 <= std_logic_vector(unsigned(trunc_ln32_3_reg_1396) + unsigned(trunc_ln32_2_reg_1391));
    add_ln32_6_fu_561_p2 <= std_logic_vector(unsigned(trunc_ln32_6_fu_544_p3) + unsigned(add_ln32_4_fu_540_p2));
    add_ln32_7_fu_840_p2 <= std_logic_vector(unsigned(zext_ln32_4_fu_832_p1) + unsigned(trunc_ln32_7_reg_1490));
    add_ln32_8_fu_409_p2 <= std_logic_vector(unsigned(trunc_ln32_1_reg_1331) + unsigned(trunc_ln32_reg_1321));
    add_ln32_fu_413_p2 <= std_logic_vector(signed(sext_ln32_3_fu_406_p1) + signed(sext_ln32_2_fu_403_p1));
    add_ln33_1_fu_627_p2 <= std_logic_vector(signed(sext_ln33_5_fu_621_p1) + signed(sext_ln33_6_fu_624_p1));
    add_ln33_2_fu_655_p2 <= std_logic_vector(signed(sext_ln33_7_fu_640_p1) + signed(add_ln33_1_fu_627_p2));
    add_ln33_3_fu_906_p2 <= std_logic_vector(unsigned(zext_ln33_fu_900_p1) + unsigned(trunc_ln1_reg_1508));
    add_ln33_4_fu_644_p2 <= std_logic_vector(unsigned(add_ln33_8_reg_1406) + unsigned(trunc_ln33_4_reg_1431));
    add_ln33_5_fu_661_p2 <= std_logic_vector(unsigned(trunc_ln33_3_reg_1426) + unsigned(trunc_ln33_2_reg_1421));
    add_ln33_6_fu_665_p2 <= std_logic_vector(unsigned(trunc_ln33_6_fu_648_p3) + unsigned(add_ln33_4_fu_644_p2));
    add_ln33_7_fu_911_p2 <= std_logic_vector(unsigned(zext_ln33_1_fu_903_p1) + unsigned(trunc_ln33_7_reg_1525));
    add_ln33_8_fu_449_p2 <= std_logic_vector(unsigned(trunc_ln33_1_reg_1351) + unsigned(trunc_ln33_reg_1341));
    add_ln33_fu_453_p2 <= std_logic_vector(signed(sext_ln33_3_fu_446_p1) + signed(sext_ln33_2_fu_443_p1));
    add_ln34_1_fu_731_p2 <= std_logic_vector(signed(sext_ln34_5_fu_725_p1) + signed(sext_ln34_6_fu_728_p1));
    add_ln34_2_fu_759_p2 <= std_logic_vector(signed(sext_ln34_7_fu_744_p1) + signed(add_ln34_1_fu_731_p2));
    add_ln34_3_fu_977_p2 <= std_logic_vector(unsigned(zext_ln34_fu_971_p1) + unsigned(trunc_ln2_reg_1543));
    add_ln34_4_fu_748_p2 <= std_logic_vector(unsigned(add_ln34_8_reg_1436) + unsigned(trunc_ln34_4_reg_1461));
    add_ln34_5_fu_765_p2 <= std_logic_vector(unsigned(trunc_ln34_3_reg_1456) + unsigned(trunc_ln34_2_reg_1451));
    add_ln34_6_fu_769_p2 <= std_logic_vector(unsigned(trunc_ln34_6_fu_752_p3) + unsigned(add_ln34_4_fu_748_p2));
    add_ln34_7_fu_982_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_974_p1) + unsigned(trunc_ln34_7_reg_1560));
    add_ln34_8_fu_486_p2 <= std_logic_vector(unsigned(trunc_ln34_1_reg_1371) + unsigned(trunc_ln34_reg_1361));
    add_ln34_fu_490_p2 <= std_logic_vector(signed(sext_ln34_3_fu_483_p1) + signed(sext_ln34_2_fu_480_p1));
    and_ln32_1_fu_895_p2 <= (tmp_4_reg_1478 and and_ln32_fu_889_p2);
    and_ln32_2_fu_1062_p2 <= (xor_ln32_1_fu_1047_p2 and tmp_3_reg_1466_pp0_iter4_reg);
    and_ln32_fu_889_p2 <= (xor_ln32_2_fu_863_p2 and icmp_ln32_fu_845_p2);
    and_ln33_1_fu_966_p2 <= (tmp_8_reg_1513 and and_ln33_fu_960_p2);
    and_ln33_2_fu_1113_p2 <= (xor_ln33_1_fu_1098_p2 and tmp_7_reg_1501_pp0_iter4_reg);
    and_ln33_fu_960_p2 <= (xor_ln33_2_fu_934_p2 and icmp_ln33_fu_916_p2);
    and_ln34_1_fu_1037_p2 <= (tmp_12_reg_1548 and and_ln34_fu_1031_p2);
    and_ln34_2_fu_1164_p2 <= (xor_ln34_1_fu_1149_p2 and tmp_11_reg_1536_pp0_iter4_reg);
    and_ln34_fu_1031_p2 <= (xor_ln34_2_fu_1005_p2 and icmp_ln34_fu_987_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_in_24_TVALID_int_regslice, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_24_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (stream_in_24_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_in_24_TVALID_int_regslice, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_24_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (stream_in_24_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_in_24_TVALID_int_regslice, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_24_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (stream_in_24_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(stream_in_24_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (stream_in_24_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(stream_out_24_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (stream_out_24_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state7_pp0_stage0_iter6_assign_proc : process(regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln32_1_fu_850_p2 <= "1" when (tmp_reg_1495 = ap_const_lv4_0) else "0";
    icmp_ln32_fu_845_p2 <= "1" when (tmp_reg_1495 = ap_const_lv4_F) else "0";
    icmp_ln33_1_fu_921_p2 <= "1" when (tmp_1_reg_1530 = ap_const_lv4_0) else "0";
    icmp_ln33_fu_916_p2 <= "1" when (tmp_1_reg_1530 = ap_const_lv4_F) else "0";
    icmp_ln34_1_fu_992_p2 <= "1" when (tmp_2_reg_1565 = ap_const_lv4_0) else "0";
    icmp_ln34_fu_987_p2 <= "1" when (tmp_2_reg_1565 = ap_const_lv4_F) else "0";
    mul_ln32_1_fu_341_p1 <= zext_ln32_1_fu_335_p1(8 - 1 downto 0);
    mul_ln32_2_fu_425_p1 <= zext_ln32_2_fu_419_p1(8 - 1 downto 0);
    mul_ln32_fu_325_p1 <= zext_ln32_fu_319_p1(8 - 1 downto 0);
    mul_ln33_1_fu_367_p1 <= zext_ln32_1_fu_335_p1(8 - 1 downto 0);
    mul_ln33_2_fu_462_p1 <= zext_ln32_2_fu_419_p1(8 - 1 downto 0);
    mul_ln33_fu_354_p1 <= zext_ln32_fu_319_p1(8 - 1 downto 0);
    mul_ln34_1_fu_393_p1 <= zext_ln32_1_fu_335_p1(8 - 1 downto 0);
    mul_ln34_2_fu_499_p1 <= zext_ln32_2_fu_419_p1(8 - 1 downto 0);
    mul_ln34_fu_380_p1 <= zext_ln32_fu_319_p1(8 - 1 downto 0);
    or_ln32_1_fu_1067_p2 <= (xor_ln32_fu_1042_p2 or and_ln32_2_fu_1062_p2);
    or_ln32_fu_884_p2 <= (tmp_3_reg_1466 or select_ln32_3_fu_877_p3);
    or_ln33_1_fu_1118_p2 <= (xor_ln33_fu_1093_p2 or and_ln33_2_fu_1113_p2);
    or_ln33_fu_955_p2 <= (tmp_7_reg_1501 or select_ln33_3_fu_948_p3);
    or_ln34_1_fu_1169_p2 <= (xor_ln34_fu_1144_p2 or and_ln34_2_fu_1164_p2);
    or_ln34_fu_1026_p2 <= (tmp_11_reg_1536 or select_ln34_3_fu_1019_p3);
    out1_fu_1086_p3 <= 
        select_ln32_2_fu_1079_p3 when (or_ln32_1_fu_1067_p2(0) = '1') else 
        add_ln32_3_reg_1571;
    out2_fu_1137_p3 <= 
        select_ln33_2_fu_1130_p3 when (or_ln33_1_fu_1118_p2(0) = '1') else 
        add_ln33_3_reg_1594;
    out3_fu_1188_p3 <= 
        select_ln34_2_fu_1181_p3 when (or_ln34_1_fu_1169_p2(0) = '1') else 
        add_ln34_3_reg_1617;
    select_ln32_1_fu_1052_p3 <= 
        add_ln32_7_reg_1577 when (and_ln32_1_reg_1588(0) = '1') else 
        ap_const_lv7_0;
    select_ln32_2_fu_1079_p3 <= 
        select_ln32_4_fu_1073_p3 when (or_ln32_reg_1582(0) = '1') else 
        ap_const_lv8_FF;
    select_ln32_3_fu_877_p3 <= 
        select_ln32_fu_869_p3 when (tmp_4_reg_1478(0) = '1') else 
        icmp_ln32_1_fu_850_p2;
    select_ln32_4_fu_1073_p3 <= 
        zext_ln32_5_fu_1058_p1 when (tmp_3_reg_1466_pp0_iter4_reg(0) = '1') else 
        add_ln32_3_reg_1571;
    select_ln32_fu_869_p3 <= 
        icmp_ln32_1_fu_850_p2 when (tmp_6_fu_855_p3(0) = '1') else 
        icmp_ln32_fu_845_p2;
    select_ln33_1_fu_1103_p3 <= 
        add_ln33_7_reg_1600 when (and_ln33_1_reg_1611(0) = '1') else 
        ap_const_lv7_0;
    select_ln33_2_fu_1130_p3 <= 
        select_ln33_4_fu_1124_p3 when (or_ln33_reg_1605(0) = '1') else 
        ap_const_lv8_FF;
    select_ln33_3_fu_948_p3 <= 
        select_ln33_fu_940_p3 when (tmp_8_reg_1513(0) = '1') else 
        icmp_ln33_1_fu_921_p2;
    select_ln33_4_fu_1124_p3 <= 
        zext_ln33_2_fu_1109_p1 when (tmp_7_reg_1501_pp0_iter4_reg(0) = '1') else 
        add_ln33_3_reg_1594;
    select_ln33_fu_940_p3 <= 
        icmp_ln33_1_fu_921_p2 when (tmp_10_fu_926_p3(0) = '1') else 
        icmp_ln33_fu_916_p2;
    select_ln34_1_fu_1154_p3 <= 
        add_ln34_7_reg_1623 when (and_ln34_1_reg_1634(0) = '1') else 
        ap_const_lv7_0;
    select_ln34_2_fu_1181_p3 <= 
        select_ln34_4_fu_1175_p3 when (or_ln34_reg_1628(0) = '1') else 
        ap_const_lv8_FF;
    select_ln34_3_fu_1019_p3 <= 
        select_ln34_fu_1011_p3 when (tmp_12_reg_1548(0) = '1') else 
        icmp_ln34_1_fu_992_p2;
    select_ln34_4_fu_1175_p3 <= 
        zext_ln34_2_fu_1160_p1 when (tmp_11_reg_1536_pp0_iter4_reg(0) = '1') else 
        add_ln34_3_reg_1617;
    select_ln34_fu_1011_p3 <= 
        icmp_ln34_1_fu_992_p2 when (tmp_14_fu_997_p3(0) = '1') else 
        icmp_ln34_fu_987_p2;
        sext_ln32_2_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln32_reg_1316),19));

        sext_ln32_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln32_1_reg_1326),19));

        sext_ln32_5_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln32_reg_1381),20));

        sext_ln32_6_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln32_2_reg_1386),20));

        sext_ln32_7_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_529_p3),20));

        sext_ln33_2_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln33_reg_1336),19));

        sext_ln33_3_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln33_1_reg_1346),19));

        sext_ln33_5_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_reg_1411),20));

        sext_ln33_6_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln33_2_reg_1416),20));

        sext_ln33_7_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_633_p3),20));

        sext_ln34_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln34_reg_1356),19));

        sext_ln34_3_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln34_1_reg_1366),19));

        sext_ln34_5_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_reg_1441),20));

        sext_ln34_6_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln34_2_reg_1446),20));

        sext_ln34_7_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_737_p3),20));

    shl_ln1_fu_633_p3 <= (bias_c2_read_reg_1281_pp0_iter2_reg & ap_const_lv8_0);
    shl_ln2_fu_737_p3 <= (bias_c3_read_reg_1306_pp0_iter2_reg & ap_const_lv8_0);
    shl_ln_fu_529_p3 <= (bias_c1_read_reg_1256_pp0_iter2_reg & ap_const_lv8_0);

    stream_in_24_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, stream_in_24_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_TDATA_blk_n <= stream_in_24_TVALID_int_regslice;
        else 
            stream_in_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_24_TREADY <= regslice_both_stream_in_24_V_data_V_U_ack_in;

    stream_in_24_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_TREADY_int_regslice <= ap_const_logic_1;
        else 
            stream_in_24_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_24_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, stream_out_24_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            stream_out_24_TDATA_blk_n <= stream_out_24_TREADY_int_regslice;
        else 
            stream_out_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_24_TDATA_int_regslice <= ((out3_fu_1188_p3 & out2_fu_1137_p3) & out1_fu_1086_p3);
    stream_out_24_TVALID <= regslice_both_stream_out_24_V_data_V_U_vld_out;

    stream_out_24_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_out_24_TVALID_int_regslice <= ap_const_logic_1;
        else 
            stream_out_24_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_926_p3 <= add_ln33_3_fu_906_p2(7 downto 7);
    tmp_14_fu_997_p3 <= add_ln34_3_fu_977_p2(7 downto 7);
    tmp_6_fu_855_p3 <= add_ln32_3_fu_835_p2(7 downto 7);
    trunc_ln32_1_fu_347_p1 <= mul_ln32_1_fu_341_p2(16 - 1 downto 0);
    trunc_ln32_2_fu_431_p1 <= mul_ln32_2_fu_425_p2(8 - 1 downto 0);
    trunc_ln32_3_fu_435_p1 <= add_ln32_8_fu_409_p2(8 - 1 downto 0);
    trunc_ln32_4_fu_439_p1 <= mul_ln32_2_fu_425_p2(16 - 1 downto 0);
    trunc_ln32_5_fu_307_p1 <= bias_c1(8 - 1 downto 0);
    trunc_ln32_6_fu_544_p3 <= (trunc_ln32_5_reg_1261_pp0_iter2_reg & ap_const_lv8_0);
    trunc_ln32_fu_331_p1 <= mul_ln32_fu_325_p2(16 - 1 downto 0);
    trunc_ln33_1_fu_373_p1 <= mul_ln33_1_fu_367_p2(16 - 1 downto 0);
    trunc_ln33_2_fu_468_p1 <= mul_ln33_2_fu_462_p2(8 - 1 downto 0);
    trunc_ln33_3_fu_472_p1 <= add_ln33_8_fu_449_p2(8 - 1 downto 0);
    trunc_ln33_4_fu_476_p1 <= mul_ln33_2_fu_462_p2(16 - 1 downto 0);
    trunc_ln33_5_fu_311_p1 <= bias_c2(8 - 1 downto 0);
    trunc_ln33_6_fu_648_p3 <= (trunc_ln33_5_reg_1286_pp0_iter2_reg & ap_const_lv8_0);
    trunc_ln33_fu_360_p1 <= mul_ln33_fu_354_p2(16 - 1 downto 0);
    trunc_ln34_1_fu_399_p1 <= mul_ln34_1_fu_393_p2(16 - 1 downto 0);
    trunc_ln34_2_fu_505_p1 <= mul_ln34_2_fu_499_p2(8 - 1 downto 0);
    trunc_ln34_3_fu_509_p1 <= add_ln34_8_fu_486_p2(8 - 1 downto 0);
    trunc_ln34_4_fu_513_p1 <= mul_ln34_2_fu_499_p2(16 - 1 downto 0);
    trunc_ln34_5_fu_315_p1 <= bias_c3(8 - 1 downto 0);
    trunc_ln34_6_fu_752_p3 <= (trunc_ln34_5_reg_1311_pp0_iter2_reg & ap_const_lv8_0);
    trunc_ln34_fu_386_p1 <= mul_ln34_fu_380_p2(16 - 1 downto 0);
    v_p1_fu_283_p1 <= stream_in_24_TDATA_int_regslice(8 - 1 downto 0);
    xor_ln32_1_fu_1047_p2 <= (ap_const_lv1_1 xor and_ln32_1_reg_1588);
    xor_ln32_2_fu_863_p2 <= (tmp_6_fu_855_p3 xor ap_const_lv1_1);
    xor_ln32_fu_1042_p2 <= (or_ln32_reg_1582 xor ap_const_lv1_1);
    xor_ln33_1_fu_1098_p2 <= (ap_const_lv1_1 xor and_ln33_1_reg_1611);
    xor_ln33_2_fu_934_p2 <= (tmp_10_fu_926_p3 xor ap_const_lv1_1);
    xor_ln33_fu_1093_p2 <= (or_ln33_reg_1605 xor ap_const_lv1_1);
    xor_ln34_1_fu_1149_p2 <= (ap_const_lv1_1 xor and_ln34_1_reg_1634);
    xor_ln34_2_fu_1005_p2 <= (tmp_14_fu_997_p3 xor ap_const_lv1_1);
    xor_ln34_fu_1144_p2 <= (or_ln34_reg_1628 xor ap_const_lv1_1);
    zext_ln32_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p2_reg_1231),18));
    zext_ln32_2_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p3_reg_1236_pp0_iter1_reg),18));
    zext_ln32_3_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1484),8));
    zext_ln32_4_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1484),7));
    zext_ln32_5_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_1052_p3),8));
    zext_ln32_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p1_reg_1226),18));
    zext_ln33_1_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1519),7));
    zext_ln33_2_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_1_fu_1103_p3),8));
    zext_ln33_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1519),8));
    zext_ln34_1_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1554),7));
    zext_ln34_2_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_1154_p3),8));
    zext_ln34_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1554),8));
end behav;
