-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity RNI_RNI_Pipeline_WEIGHTS_LOOP_WEIGHTS_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 56
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of RNI_RNI_Pipeline_WEIGHTS_LOOP_WEIGHTS_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11010001", 1 => "11111100", 2 => "00001111", 3 => "11011000", 
    4 => "11000011", 5 => "00001100", 6 => "11010110", 7 => "11011010", 
    8 => "10111110", 9 => "11110110", 10 => "10110111", 11 => "11101101", 
    12 => "11100100", 13 => "11111010", 14 => "11001000", 15 => "00110011", 
    16 => "11101010", 17 => "11001001", 18 => "00101110", 19 => "00000010", 
    20 => "11111101", 21 => "00011101", 22 => "00100011", 23 => "11001011", 
    24 => "00001001", 25 => "11011010", 26 => "00000011", 27 => "00100001", 
    28 => "11110110", 29 => "11111000", 30 => "11011101", 31 => "00011110", 
    32 => "00001010", 33 => "00010011", 34 => "11011110", 35 => "00010000", 
    36 => "11100110", 37 => "11110010", 38 => "00000001", 39 => "00110111", 
    40 => "00111101", 41 => "00111101", 42 => "00000000", 43 => "00101000", 
    44 => "00100011", 45 => "11010110", 46 => "00100101", 47 => "11111010", 
    48 => "00101000", 49 => "11111100", 50 => "00010111", 51 => "11000101", 
    52 => "00001010", 53 => "11010111", 54 => "11111100", 55 => "11011011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

